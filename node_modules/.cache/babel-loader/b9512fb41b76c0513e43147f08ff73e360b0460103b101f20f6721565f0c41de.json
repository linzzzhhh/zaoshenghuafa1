{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nimport { ElMessage } from \"element-plus\";\n\n// 定义父组件传递的参数，并初始化\n\nexport default {\n  __name: 'surveyDialog',\n  props: {\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    },\n    surveyQuestionIds: {\n      type: String,\n      default: \"0\",\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n\n    // 监听本页面dialogVisible（是否可见）值的变化\n    watch(() => props.dialogVisible, () => {\n      let id = props.id;\n      if (id !== -1 && props.dialogVisible === true) {\n        // 本页面可见时，根据题目Ids获取题目集合，并做初始化处理\n        initData(props.surveyQuestionIds);\n      }\n    });\n\n    // 初始化表单元素的数据\n    const form = ref({\n      questionList: [{\n        id: 0,\n        content: \"\",\n        description: \"\",\n        surveyCateId: 1,\n        itemList: [],\n        result: \"\",\n        selection: [] // 用于绑定多选题的值\n      }]\n    });\n\n    /**\r\n     * 单选、判断、简答题，答案的值改变时调用\r\n     * @param val\r\n     * @param index\r\n     */\n    const handleChange = (val, index) => {\n      // 获取改变的值，赋值给form中的questionList中的相应题的result\n      form.value.questionList[index].result = val.srcElement.value;\n    };\n\n    /**\r\n     * 多选题选中的选项改变时调用\r\n     * @param val\r\n     * @param index\r\n     */\n    const handleCheck = (val, index) => {\n      // 取出和多选题组件绑定的 选中的选项的ID数组\n      let selection = form.value.questionList[index].selection;\n      console.log(selection);\n      // 将该集合用\",\"连接成字符串\n      let result = \"\";\n      selection.map((item, index) => {\n        result += item;\n        if (index !== selection.length - 1) {\n          result += \",\";\n        }\n      });\n      console.log(result);\n      // 将拼接好的字符串赋值给form中的questionList中的相应题（根据index确定）的result\n      form.value.questionList[index].result = result;\n    };\n\n    // 定义要调用的父组件的方法\n\n    /**\r\n     * 根据题目Ids获取题目集合，并做初始化处理\r\n     * @param surveyQuestionIds\r\n     * @returns {Promise<void>}\r\n     */\n    const initData = async surveyQuestionIds => {\n      // 向后端发送请求，根据组卷id串获取问卷题目集合\n      let res = await axios.get('/api/survey-question/getSurveyQuestionsBYIds/' + surveyQuestionIds);\n      // 将返回的数据赋值给中间变量list\n      let list = res.data.data.surveyQuestions;\n      // 遍历题目集合list\n      for (var i = 0; i < list.length; i++) {\n        // 如果是选择题，加载选项\n        if (list[i].surveyCateId === 1 || list[i].surveyCateId === 2) {\n          // 向后端发送请求，根据题目id串获取该题的选项集合\n          let res2 = await axios.get('/api/survey-item/getSurveyItemsByIds/' + list[i].surveyItemIds);\n          let itemList = res2.data.data.surveyItems;\n          // 选项ID为int类型不能反显，转为string\n          itemList.forEach(item => item.id = item.id.toString());\n          // 如果是多选题，添加checked属性\n          if (list[i].surveyCateId === 2) {\n            itemList.forEach(item => item.checked = false);\n          }\n          // 将处理好的选项数组赋值给list中相应项的itemList属性\n          list[i].itemList = itemList;\n        } else {\n          // 不是选择题，itemList设为空\n          list[i].itemList = [];\n        }\n        // 初始化每道题的result（答案）属性，用于记录答卷人每道题的答案\n        list[i].result = \"\";\n      }\n      // 将处理好的list赋值给form中的questionList\n      form.value.questionList = list;\n      console.log(form.value.questionList);\n    };\n\n    /**\r\n     * 点击提交时调用\r\n     */\n    const handleConfirm = async () => {\n      let list = form.value.questionList;\n      let results = \"\";\n      // 遍历问卷所有result，拼接成”问题id-答案“的形式\n      list.map((item, index) => {\n        results += item.id + \"-\" + item.result;\n        if (index !== list.length - 1) {\n          results += \";\";\n        }\n      });\n      console.log(results);\n      // 获取浏览器中存储的当前登录用户的ID\n      const userId = window.sessionStorage.getItem('userId');\n      // 提交问卷调查结果\n      const resultObj = {\n        results: results,\n        serveyListId: props.id,\n        userId: userId\n      };\n      let res = await axios.post('/api/survey-results/add', resultObj);\n      console.log(res);\n      if (res.data.success === true) {\n        ElMessage.success(\"提交成功！\");\n        // 关闭该弹窗\n        handleClose();\n      } else {\n        ElMessage.error(res.data.msg);\n      }\n    };\n\n    /**\r\n     * 点击关闭或取消时调用\r\n     */\n    const handleClose = () => {\n      // 设置dialogVisible为不可见\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      props,\n      form,\n      handleChange,\n      handleCheck,\n      emits,\n      initData,\n      handleConfirm,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","ElMessage","props","dialogVisible","id","initData","surveyQuestionIds","form","questionList","content","description","surveyCateId","itemList","result","selection","handleChange","val","index","value","srcElement","handleCheck","console","log","map","item","length","res","get","list","data","surveyQuestions","i","res2","surveyItemIds","surveyItems","forEach","toString","checked","handleConfirm","results","userId","window","sessionStorage","getItem","resultObj","serveyListId","post","success","handleClose","error","msg","emits"],"sources":["C:/Users/林ＺＨ/Desktop/survey/src/views/survey/components/surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-form :model=\"form\">\r\n            <el-row style=\"margin-bottom: 50px\"\r\n                    v-for=\"(question,index) in form.questionList\"\r\n                    :key=\"question.id\"\r\n            >\r\n                <el-col :span=\"24\">\r\n                    <!--题目内容-->\r\n                    <el-row class=\"question\">\r\n                        <el-col :span=\"1\">{{index+1}}、</el-col>\r\n                        <el-col :span=\"23\">{{question.content}}</el-col>\r\n                    </el-row>\r\n                    <!--如果有描述则显示描述-->\r\n                    <el-row v-if=\"question.description!=''\" class=\"description\">\r\n                        注：<span>{{question.description}}</span>\r\n                    </el-row>\r\n                    <!--题目选项或答题区-->\r\n                    <el-row class=\"result\">\r\n                        <!--单选题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId===1\">\r\n                            <el-row>\r\n                                <el-form-item @change=\"(val)=>handleChange(val,index)\">\r\n                                    <el-radio-group v-model=\"question.result\">\r\n                                        <el-radio class=\"item\"\r\n                                                  v-for=\"(option,i) in question.itemList\"\r\n                                                  :key=\"i\"\r\n                                                  v-model=\"question.result\"\r\n                                                  :label=\"option.id\"\r\n                                        >\r\n                                            {{option.item}}\r\n                                        </el-radio>\r\n                                    </el-radio-group>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                        <!--多选题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId===2\">\r\n                            <el-row>\r\n                                <el-form-item>\r\n                                    <el-checkbox-group v-model=\"question.selection\">\r\n                                        <el-checkbox class=\"item\"\r\n                                                     v-for=\"(option,i) in question.itemList\"\r\n                                                     :key=\"i\"\r\n                                                     :label=\"option.id\"\r\n                                                     @change=\"(val)=>handleCheck(val,index)\"\r\n                                        >\r\n                                            {{option.item}}\r\n                                        </el-checkbox>\r\n                                    </el-checkbox-group>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                        <!--判断题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId===3\">\r\n                            <el-row>\r\n                                <el-form-item @change=\"(val)=>handleChange(val,index)\">\r\n                                    <el-radio-group v-model=\"question.result\">\r\n                                        <el-radio label=\"true\">是</el-radio>\r\n                                        <el-radio label=\"false\">否</el-radio>\r\n                                    </el-radio-group>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                        <!--如果是简答题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId!==1 && question.surveyCateId!==2 && question.surveyCateId!==3\">\r\n                            <el-row>\r\n                                <el-form-item @blur.native.capture=\"(val)=>handleChange(val,index)\">\r\n                                    <el-input type=\"textarea\" style=\"width: 500px\" v-model=\"question.result\"/>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                    </el-row>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n        <template #footer>\r\n          <span class=\"dialog-footer\">\r\n              <el-button @click=\"handleClose\">取消</el-button>\r\n              <el-button type=\"primary\" @click=\"handleConfirm\">提交</el-button>\r\n          </span>\r\n        </template>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\n// 定义父组件传递的参数，并初始化\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\n\r\n// 监听本页面dialogVisible（是否可见）值的变化\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            // 本页面可见时，根据题目Ids获取题目集合，并做初始化处理\r\n            initData(props.surveyQuestionIds);\r\n        }\r\n    }\r\n)\r\n\r\n// 初始化表单元素的数据\r\nconst form = ref({\r\n  questionList: [\r\n    {\r\n      id: 0,\r\n      content: \"\",\r\n      description: \"\",\r\n      surveyCateId: 1,\r\n      itemList: [],\r\n      result: \"\",\r\n      selection: [] // 用于绑定多选题的值\r\n    }\r\n  ]\r\n})\r\n\r\n/**\r\n * 单选、判断、简答题，答案的值改变时调用\r\n * @param val\r\n * @param index\r\n */\r\nconst handleChange = (val,index) => {\r\n    // 获取改变的值，赋值给form中的questionList中的相应题的result\r\n    form.value.questionList[index].result = val.srcElement.value\r\n}\r\n\r\n/**\r\n * 多选题选中的选项改变时调用\r\n * @param val\r\n * @param index\r\n */\r\nconst handleCheck = (val,index) => {\r\n    // 取出和多选题组件绑定的 选中的选项的ID数组\r\n    let selection = form.value.questionList[index].selection;\r\n    console.log(selection);\r\n    // 将该集合用\",\"连接成字符串\r\n    let result = \"\";\r\n    selection.map((item, index) => {\r\n        result += item;\r\n        if (index !== selection.length-1) {\r\n            result += \",\";\r\n        }\r\n    })\r\n    console.log(result);\r\n    // 将拼接好的字符串赋值给form中的questionList中的相应题（根据index确定）的result\r\n    form.value.questionList[index].result = result;\r\n}\r\n\r\n// 定义要调用的父组件的方法\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\n\r\n/**\r\n * 根据题目Ids获取题目集合，并做初始化处理\r\n * @param surveyQuestionIds\r\n * @returns {Promise<void>}\r\n */\r\nconst initData = async (surveyQuestionIds) => {\r\n    // 向后端发送请求，根据组卷id串获取问卷题目集合\r\n    let res = await axios.get('/api/survey-question/getSurveyQuestionsBYIds/' + surveyQuestionIds);\r\n    // 将返回的数据赋值给中间变量list\r\n    let list = res.data.data.surveyQuestions\r\n    // 遍历题目集合list\r\n    for (var i=0; i<list.length; i++) {\r\n        // 如果是选择题，加载选项\r\n        if (list[i].surveyCateId === 1 || list[i].surveyCateId === 2) {\r\n            // 向后端发送请求，根据题目id串获取该题的选项集合\r\n            let res2 = await axios.get('/api/survey-item/getSurveyItemsByIds/' + list[i].surveyItemIds);\r\n            let itemList = res2.data.data.surveyItems;\r\n            // 选项ID为int类型不能反显，转为string\r\n            itemList.forEach((item)=> item.id = item.id.toString())\r\n            // 如果是多选题，添加checked属性\r\n            if (list[i].surveyCateId === 2) {\r\n                itemList.forEach((item)=> item.checked = false)\r\n            }\r\n            // 将处理好的选项数组赋值给list中相应项的itemList属性\r\n            list[i].itemList = itemList;\r\n        } else {    // 不是选择题，itemList设为空\r\n          list[i].itemList = [];\r\n        }\r\n        // 初始化每道题的result（答案）属性，用于记录答卷人每道题的答案\r\n        list[i].result = \"\";\r\n    }\r\n    // 将处理好的list赋值给form中的questionList\r\n    form.value.questionList = list;\r\n    console.log(form.value.questionList)\r\n}\r\n\r\n/**\r\n * 点击提交时调用\r\n */\r\nconst handleConfirm = async () => {\r\n    let list = form.value.questionList;\r\n    let results = \"\";\r\n    // 遍历问卷所有result，拼接成”问题id-答案“的形式\r\n    list.map((item, index) => {\r\n        results += item.id + \"-\" + item.result;\r\n        if (index !== list.length-1) {\r\n            results += \";\"\r\n        }\r\n    });\r\n    console.log(results);\r\n    // 获取浏览器中存储的当前登录用户的ID\r\n    const userId = window.sessionStorage.getItem('userId');\r\n    // 提交问卷调查结果\r\n    const resultObj = {\r\n        results: results,\r\n        serveyListId: props.id,\r\n        userId: userId\r\n    };\r\n    let res = await axios.post('/api/survey-results/add', resultObj);\r\n    console.log(res)\r\n    if (res.data.success === true) {\r\n        ElMessage.success(\"提交成功！\");\r\n        // 关闭该弹窗\r\n        handleClose();\r\n    } else {\r\n        ElMessage.error(res.data.msg);\r\n    }\r\n}\r\n\r\n/**\r\n * 点击关闭或取消时调用\r\n */\r\nconst handleClose = () => {\r\n    // 设置dialogVisible为不可见\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.question {\r\n  margin-bottom: 15px;\r\n  font-size: large;\r\n}\r\n.description {\r\n  margin: 15px;\r\n}\r\n.result {\r\n  margin-bottom: 15px;\r\n}\r\n.item {\r\n  margin-left: 15px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}