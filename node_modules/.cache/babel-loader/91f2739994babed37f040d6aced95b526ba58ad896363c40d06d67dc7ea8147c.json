{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-63092d00\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_col = _resolveComponent(\"el-col\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    \"model-value\": \"dialogVisible\",\n    title: \"答题\",\n    width: \"40%\",\n    onClose: $setup.handleClose\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.questionList, (item, index) => {\n      return _openBlock(), _createBlock(_component_el_row, {\n        style: {\n          \"margin-bottom\": \"50px\"\n        },\n        key: item.id\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_col, {\n          span: 24\n        }, {\n          default: _withCtx(() => [_createCommentVNode(\"                题目内容\"), _createVNode(_component_el_row, {\n            class: \"question\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_col, {\n              span: 1\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(index + 1) + \"、\", 1 /* TEXT */)]),\n\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */), _createVNode(_component_el_col, {\n              span: 23\n            }, {\n              default: _withCtx(() => [_createTextVNode(_toDisplayString(item.content), 1 /* TEXT */)]),\n\n              _: 2 /* DYNAMIC */\n            }, 1024 /* DYNAMIC_SLOTS */)]),\n\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */), _createCommentVNode(\"            如果有描述则显示描述\"), item.description != '' ? (_openBlock(), _createBlock(_component_el_row, {\n            key: 0,\n            class: \"description\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(\" 注：\"), _createElementVNode(\"span\", null, _toDisplayString(item.description), 1 /* TEXT */)]),\n\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"                题目选项或答题区\"), _createVNode(_component_el_row, {\n            class: \"result\"\n          }, {\n            default: _withCtx(() => [_createCommentVNode(\"如果是选择题\"), item.surveyCateId === 1 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, \" 选择题 \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"如果是判断题\"), item.surveyCateId === 2 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, \" 判断题 \")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\"如果是简答题或其他\"), item.surveyCateId !== 1 && item.surveyCateId !== 2 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \" 简答题或其他 \")) : _createCommentVNode(\"v-if\", true)]),\n            _: 2 /* DYNAMIC */\n          }, 1024 /* DYNAMIC_SLOTS */)]),\n\n          _: 2 /* DYNAMIC */\n        }, 1024 /* DYNAMIC_SLOTS */)]),\n\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_dialog","title","width","onClose","$setup","handleClose","_createElementBlock","_Fragment","_renderList","questionList","item","index","_component_el_row","style","key","id","_createVNode","_component_el_col","span","_createCommentVNode","class","content","description","_createElementVNode","_toDisplayString","surveyCateId","_hoisted_1","_hoisted_2","_hoisted_3"],"sources":["D:\\vue_project\\survey-vue\\src\\views\\survey\\components\\surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-row style=\"margin-bottom: 50px\"\r\n            v-for=\"(item,index) in questionList\"\r\n            :key=\"item.id\"\r\n        >\r\n            <el-col :span=\"24\">\r\n<!--                题目内容-->\r\n                <el-row class=\"question\">\r\n                    <el-col :span=\"1\">{{index+1}}、</el-col>\r\n                    <el-col :span=\"23\">{{item.content}}</el-col>\r\n                </el-row>\r\n<!--            如果有描述则显示描述-->\r\n                <el-row v-if=\"item.description!=''\" class=\"description\">\r\n                    注：<span>{{item.description}}</span>\r\n                </el-row>\r\n<!--                题目选项或答题区-->\r\n                <el-row class=\"result\">\r\n                    <!--如果是选择题-->\r\n                    <span v-if=\"item.surveyCateId===1\">\r\n选择题\r\n                    </span>\r\n                    <!--如果是判断题-->\r\n                    <span v-if=\"item.surveyCateId===2\">\r\n判断题\r\n                    </span>\r\n                    <!--如果是简答题或其他-->\r\n                    <span v-if=\"item.surveyCateId!==1 && item.surveyCateId!==2\">\r\n简答题或其他\r\n                    </span>\r\n                </el-row>\r\n            </el-col>\r\n        </el-row>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n            console.log(questionList.value)\r\n        }\r\n    }\r\n)\r\nconst questionList = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = async (surveyQuestionIds) => {\r\n    let res = await axios.get('/api/survey-question/getSurveyQuestions/' + surveyQuestionIds);\r\n    let list = res.data.data.surveyQuestions\r\n    // let questionIdList = surveyQuestionIds.split(',');\r\n    // let list = await Promise.all(\r\n    //     questionIdList.map(\r\n    //         async (item) => {\r\n    //             let res = await axios.get('/api/survey-question/one/' + item);\r\n    //             let question = res.data.data.surveyQuestion;\r\n    //             console.log(question)\r\n    //             return question;\r\n    //         }\r\n    //     )\r\n    // )\r\n    list.forEach(\r\n        (item, index) => {\r\n            // 如果是选择题，加载选项\r\n            if (item.surveyCateId === 1) {\r\n                let itemIdList = question.surveyItemIds.split(',');\r\n            }\r\n        }\r\n    )\r\n    questionList.value = list;\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.question {\r\n  margin-bottom: 15px;\r\n  font-size: large;\r\n}\r\n.description {\r\n  margin: 15px;\r\n}\r\n.result {\r\n  margin-bottom: 15px;\r\n}\r\n</style>"],"mappings":";;;;;;;;;;;;;;;uBACIA,YAAA,CAqCYC,oBAAA;IApCJ,aAAW,EAAC,eAAe;IAC3BC,KAAK,EAAC,IAAI;IACVC,KAAK,EAAC,KAAK;IACVC,OAAK,EAAEC,MAAA,CAAAC;;sBAGR,MAAoC,E,kBADxCC,mBAAA,CA8BSC,SAAA,QAAAC,WAAA,CA7BkBJ,MAAA,CAAAK,YAAY,GAA3BC,IAAI,EAACC,KAAK;2BADtBZ,YAAA,CA8BSa,iBAAA;QA9BDC,KAA2B,EAA3B;UAAA;QAAA,CAA2B;QAE9BC,GAAG,EAAEJ,IAAI,CAACK;;0BAEX,MAyBS,CAzBTC,YAAA,CAyBSC,iBAAA;UAzBAC,IAAI,EAAE;QAAE;4BAC7B,MAA2B,CAA3BC,mBAAA,wBAA2B,EACXH,YAAA,CAGSJ,iBAAA;YAHDQ,KAAK,EAAC;UAAU;8BACpB,MAAuC,CAAvCJ,YAAA,CAAuCC,iBAAA;cAA9BC,IAAI,EAAE;YAAC;gCAAE,MAAW,C,kCAATP,KAAK,QAAI,GAAC,gB;;;0CAC9BK,YAAA,CAA4CC,iBAAA;cAAnCC,IAAI,EAAE;YAAE;gCAAE,MAAgB,C,kCAAdR,IAAI,CAACW,OAAO,iB;;;;;;wCAErDF,mBAAA,0BAA6B,EACCT,IAAI,CAACY,WAAW,U,cAA9BvB,YAAA,CAESa,iBAAA;;YAF2BQ,KAAK,EAAC;;8BAAc,MAClD,C,iBADkD,KAClD,GAAAG,mBAAA,CAAiC,cAAAC,gBAAA,CAAzBd,IAAI,CAACY,WAAW,iB;;;6EAE9CH,mBAAA,4BAA+B,EACfH,YAAA,CAaSJ,iBAAA;YAbDQ,KAAK,EAAC;UAAQ;8BAClB,MAAa,CAAbD,mBAAA,UAAa,EACDT,IAAI,CAACe,YAAY,U,cAA7BnB,mBAAA,CAEO,QAAAoB,UAAA,EAF4B,OAEnC,K,mCACAP,mBAAA,UAAa,EACDT,IAAI,CAACe,YAAY,U,cAA7BnB,mBAAA,CAEO,QAAAqB,UAAA,EAF4B,OAEnC,K,mCACAR,mBAAA,aAAgB,EACJT,IAAI,CAACe,YAAY,UAAQf,IAAI,CAACe,YAAY,U,cAAtDnB,mBAAA,CAEO,QAAAsB,UAAA,EAFqD,UAE5D,K"},"metadata":{},"sourceType":"module","externalDependencies":[]}