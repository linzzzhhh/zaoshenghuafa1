{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nimport { ElMessage } from \"element-plus\";\nexport default {\n  __name: 'edit',\n  props: {\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n    const formRef = ref(null);\n    const form = ref({\n      id: null,\n      content: \"\",\n      description: \"\",\n      surveyCateId: null,\n      surveyItemIds: \"0\",\n      userId: 0\n    });\n    const rules = ref({\n      content: [{\n        required: true,\n        message: '请输入问题内容！'\n      }],\n      surveyCateId: [{\n        required: true,\n        message: '请选择题目类型！'\n      }]\n    });\n    watch(() => props.dialogVisible, () => {\n      let id = props.id;\n      if (id !== -1 && props.dialogVisible === true) {\n        initFormData(id);\n      }\n    });\n    const initFormData = async id => {\n      const res = await axios.get('/api/survey-cate/one/' + id);\n      form.value = res.data.data.surveyCate;\n    };\n    const handleConfirm = () => {\n      formRef.value.validate(async valid => {\n        if (valid) {\n          let res = await axios.post('/api/survey-cate/edit', form.value);\n          if (res.data.success === true) {\n            ElMessage.success(\"执行成功！\");\n            formRef.value.resetFields();\n            emits('initList');\n            handleClose();\n          } else {\n            ElMessage.error(res.data.msg);\n          }\n        } else {\n          console.log(\"error:\" + err);\n          ElMessage.error(\"系统错误，请联系管理员\");\n        }\n      });\n    };\n    const handleClose = () => {\n      formRef.value.resetFields();\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      formRef,\n      props,\n      form,\n      rules,\n      emits,\n      initFormData,\n      handleConfirm,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","ElMessage","formRef","form","id","content","description","surveyCateId","surveyItemIds","userId","rules","required","message","props","dialogVisible","initFormData","res","get","value","data","surveyCate","handleConfirm","validate","valid","post","success","resetFields","emits","handleClose","error","msg","console","log","err"],"sources":["D:/vue_project/survey-vue/src/views/question/components/edit.vue"],"sourcesContent":["<template>\r\n  <el-dialog\r\n    model-value=\"dialogVisible\"\r\n    title=\"修改\"\r\n    width=\"40%\"\r\n    @close=\"handleClose\"\r\n  >\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-width=\"150px\"\r\n      >\r\n          <el-form-item label=\"问题\" prop=\"content\">\r\n              <el-input v-model=\"form.content\"/>\r\n          </el-form-item>\r\n          <el-form-item label=\"描述\" prop=\"description\">\r\n              <el-input v-model=\"form.description\"/>\r\n          </el-form-item>\r\n          <el-form-item label=\"题目类型\" prop=\"surveyCateId\">\r\n              <el-select v-model=\"form.surveyCateId\" placeholder=\"请选择..\">\r\n                  <el-option\r\n                          v-for=\"item in cateList\"\r\n                          :key=\"item.id\"\r\n                          :label=\"item.cateName\"\r\n                          :value=\"item.id\"\r\n                  ></el-option>\r\n              </el-select>\r\n          </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n          <span class=\"dialog-footer\">\r\n              <el-button @click=\"handleClose\">取消</el-button>\r\n              <el-button type=\"primary\" @click=\"handleConfirm\">确认</el-button>\r\n          </span>\r\n      </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\nconst formRef = ref(null);\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        }\r\n    }\r\n)\r\nconst form = ref({\r\n    id: null,\r\n    content: \"\",\r\n    description: \"\",\r\n    surveyCateId: null,\r\n    surveyItemIds: \"0\",\r\n    userId: 0\r\n})\r\nconst rules = ref({\r\n    content: [\r\n        {\r\n            required: true,\r\n            message: '请输入问题内容！'\r\n        }\r\n    ],\r\n    surveyCateId: [\r\n        {\r\n            required: true,\r\n            message: '请选择题目类型！'\r\n        }\r\n    ],\r\n})\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initFormData(id);\r\n        }\r\n    }\r\n)\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initFormData = async (id) => {\r\n    const res = await axios.get('/api/survey-cate/one/' + id);\r\n    form.value = res.data.data.surveyCate;\r\n}\r\nconst handleConfirm = () => {\r\n    formRef.value.validate(async (valid) => {\r\n        if (valid) {\r\n            let res = await axios.post('/api/survey-cate/edit', form.value);\r\n            if (res.data.success === true) {\r\n                ElMessage.success(\"执行成功！\");\r\n                formRef.value.resetFields();\r\n                emits('initList');\r\n                handleClose();\r\n            } else {\r\n                ElMessage.error(res.data.msg);\r\n            }\r\n        } else {\r\n            console.log(\"error:\"+err);\r\n            ElMessage.error(\"系统错误，请联系管理员\");\r\n        }\r\n    })\r\n}\r\nconst handleClose = () => {\r\n    formRef.value.resetFields();\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AAwCA,SAAkCA,GAAG,EAAEC,KAAK,QAAO,KAAK;AACxD,OAAOC,KAAK,MAAM,cAAc;AAChC,SAAQC,SAAS,QAAO,cAAc;;;;;;;;;;;;;;;;;;;;;;IAEtC,MAAMC,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;IAezB,MAAMK,IAAI,GAAGL,GAAG,CAAC;MACbM,EAAE,EAAE,IAAI;MACRC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,GAAG;MAClBC,MAAM,EAAE;IACZ,CAAC,CAAC;IACF,MAAMC,KAAK,GAAGZ,GAAG,CAAC;MACdO,OAAO,EAAE,CACL;QACIM,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC,CACJ;MACDL,YAAY,EAAE,CACV;QACII,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC;IAET,CAAC,CAAC;IACFb,KAAK,CACD,MAAIc,KAAK,CAACC,aAAa,EACvB,MAAI;MACA,IAAIV,EAAE,GAAGS,KAAK,CAACT,EAAE;MACjB,IAAIA,EAAE,KAAK,CAAC,CAAC,IAAIS,KAAK,CAACC,aAAa,KAAK,IAAI,EAAE;QAC3CC,YAAY,CAACX,EAAE,CAAC;MACpB;IACJ,CACJ,CAAC;IAED,MAAMW,YAAY,GAAG,MAAOX,EAAE,IAAK;MAC/B,MAAMY,GAAG,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,uBAAuB,GAAGb,EAAE,CAAC;MACzDD,IAAI,CAACe,KAAK,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI,CAACC,UAAU;IACzC,CAAC;IACD,MAAMC,aAAa,GAAGA,CAAA,KAAM;MACxBnB,OAAO,CAACgB,KAAK,CAACI,QAAQ,CAAC,MAAOC,KAAK,IAAK;QACpC,IAAIA,KAAK,EAAE;UACP,IAAIP,GAAG,GAAG,MAAMhB,KAAK,CAACwB,IAAI,CAAC,uBAAuB,EAAErB,IAAI,CAACe,KAAK,CAAC;UAC/D,IAAIF,GAAG,CAACG,IAAI,CAACM,OAAO,KAAK,IAAI,EAAE;YAC3BxB,SAAS,CAACwB,OAAO,CAAC,OAAO,CAAC;YAC1BvB,OAAO,CAACgB,KAAK,CAACQ,WAAW,CAAC,CAAC;YAC3BC,KAAK,CAAC,UAAU,CAAC;YACjBC,WAAW,CAAC,CAAC;UACjB,CAAC,MAAM;YACH3B,SAAS,CAAC4B,KAAK,CAACb,GAAG,CAACG,IAAI,CAACW,GAAG,CAAC;UACjC;QACJ,CAAC,MAAM;UACHC,OAAO,CAACC,GAAG,CAAC,QAAQ,GAACC,GAAG,CAAC;UACzBhC,SAAS,CAAC4B,KAAK,CAAC,aAAa,CAAC;QAClC;MACJ,CAAC,CAAC;IACN,CAAC;IACD,MAAMD,WAAW,GAAGA,CAAA,KAAM;MACtB1B,OAAO,CAACgB,KAAK,CAACQ,WAAW,CAAC,CAAC;MAC3BC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}