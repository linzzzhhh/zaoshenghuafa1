{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dialog-footer\"\n};\nimport { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nimport { ElMessage } from \"element-plus\";\n\n// 定义父组件传递的参数，并初始化\n\nexport default {\n  __name: 'add',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    emit: emits\n  }) {\n    const props = __props;\n\n    // 初始化表单控件\n    const formRef = ref(null);\n\n    // 初始化表单元素的数据\n    const form = ref({\n      id: null,\n      content: \"\",\n      description: \"\",\n      surveyCateId: null,\n      surveyItemIds: \"0\",\n      userId: 0\n    });\n\n    // 定义表单验证规则\n    const rules = ref({\n      content: [{\n        required: true,\n        message: '请输入问题内容！'\n      }],\n      surveyCateId: [{\n        required: true,\n        message: '请选择题目类型！'\n      }]\n    });\n\n    // 初始化类型下拉框数据\n    const cateList = ref([]);\n\n    /**\r\n     * 获取题目类型下拉框数据\r\n     * @returns {Promise<void>}\r\n     */\n    const initCateList = async () => {\n      // 向后端请求获取所有题目类型\n      const res = await axios.get('/api/survey-cate/all');\n      // 将返回结果赋值给cateList\n      cateList.value = res.data.data.surveyCates;\n    };\n    initCateList();\n\n    // 监听本页面dialogVisible（是否可见）值的变化\n    watch(() => props.dialogVisible, () => {\n      // 表单数据置空\n      form.value = {\n        id: null,\n        content: \"\",\n        description: \"\",\n        surveyCateId: null,\n        surveyItemIds: \"0\",\n        userId: 0\n      };\n    });\n\n    // 定义要调用的父组件的方法\n\n    /**\r\n     * 点击提交时调用\r\n     */\n    const handleAdd = () => {\n      formRef.value.validate(async valid => {\n        if (valid) {\n          // 向后端发送新增数据请求\n          let res = await axios.post('/api/survey-question/add', form.value);\n          console.log(res);\n          if (res.data.success === true) {\n            ElMessage.success(\"执行成功！\");\n            // 重置表单\n            formRef.value.resetFields();\n            // 刷新父组件表格数据\n            emits('initList');\n            // 关闭该弹窗\n            handleClose();\n          } else {\n            ElMessage.error(res.data.msg);\n          }\n        } else {\n          console.log(\"error:\" + err);\n          ElMessage.error(\"系统错误，请联系管理员\");\n        }\n      });\n    };\n\n    /**\r\n     * 点击关闭或取消时调用\r\n     */\n    const handleClose = () => {\n      // 重置表单\n      formRef.value.resetFields();\n      // 设置dialogVisible为不可见\n      emits('update:modelValue', false);\n    };\n    return (_ctx, _cache) => {\n      const _component_el_input = _resolveComponent(\"el-input\");\n      const _component_el_form_item = _resolveComponent(\"el-form-item\");\n      const _component_el_option = _resolveComponent(\"el-option\");\n      const _component_el_select = _resolveComponent(\"el-select\");\n      const _component_el_form = _resolveComponent(\"el-form\");\n      const _component_el_button = _resolveComponent(\"el-button\");\n      const _component_el_dialog = _resolveComponent(\"el-dialog\");\n      return _openBlock(), _createBlock(_component_el_dialog, {\n        \"model-value\": \"dialogVisible\",\n        title: \"添加\",\n        width: \"40%\",\n        onClose: handleClose\n      }, {\n        footer: _withCtx(() => [_createElementVNode(\"span\", _hoisted_1, [_createVNode(_component_el_button, {\n          onClick: handleClose\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"取消\")]),\n          _: 1\n        }), _createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: handleAdd\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"提交\")]),\n          _: 1\n        })])]),\n        default: _withCtx(() => [_createVNode(_component_el_form, {\n          ref_key: \"formRef\",\n          ref: formRef,\n          model: form.value,\n          rules: rules.value,\n          \"label-width\": \"150px\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"问题\",\n            prop: \"content\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: form.value.content,\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => form.value.content = $event)\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"描述\",\n            prop: \"description\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: form.value.description,\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => form.value.description = $event)\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"题目类型\",\n            prop: \"surveyCateId\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_select, {\n              modelValue: form.value.surveyCateId,\n              \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => form.value.surveyCateId = $event),\n              placeholder: \"请选择..\"\n            }, {\n              default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(cateList.value, item => {\n                return _openBlock(), _createBlock(_component_el_option, {\n                  key: item.id,\n                  label: item.cateName,\n                  value: item.id\n                }, null, 8, [\"label\", \"value\"]);\n              }), 128))]),\n              _: 1\n            }, 8, [\"modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"model\", \"rules\"])]),\n        _: 1\n      });\n    };\n  }\n};","map":{"version":3,"names":["ref","watch","axios","ElMessage","formRef","form","id","content","description","surveyCateId","surveyItemIds","userId","rules","required","message","cateList","initCateList","res","get","value","data","surveyCates","props","dialogVisible","handleAdd","validate","valid","post","console","log","success","resetFields","emits","handleClose","error","msg","err"],"sources":["C:/Users/林ＺＨ/Desktop/survey/src/views/question/components/add.vue"],"sourcesContent":["<template>\r\n  <el-dialog\r\n    model-value=\"dialogVisible\"\r\n    title=\"添加\"\r\n    width=\"40%\"\r\n    @close=\"handleClose\"\r\n  >\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-width=\"150px\"\r\n      >\r\n          <el-form-item label=\"问题\" prop=\"content\">\r\n              <el-input v-model=\"form.content\"/>\r\n          </el-form-item>\r\n          <el-form-item label=\"描述\" prop=\"description\">\r\n              <el-input v-model=\"form.description\"/>\r\n          </el-form-item>\r\n          <el-form-item label=\"题目类型\" prop=\"surveyCateId\">\r\n              <el-select v-model=\"form.surveyCateId\" placeholder=\"请选择..\">\r\n                  <el-option\r\n                          v-for=\"item in cateList\"\r\n                          :key=\"item.id\"\r\n                          :label=\"item.cateName\"\r\n                          :value=\"item.id\"\r\n                  ></el-option>\r\n              </el-select>\r\n          </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n          <span class=\"dialog-footer\">\r\n              <el-button @click=\"handleClose\">取消</el-button>\r\n              <el-button type=\"primary\" @click=\"handleAdd\">提交</el-button>\r\n          </span>\r\n      </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\n// 定义父组件传递的参数，并初始化\r\nconst props = defineProps(\r\n    {\r\n      dialogVisible: {\r\n        type: Boolean,\r\n        default: false,\r\n        required: true\r\n      }\r\n    }\r\n)\r\n\r\n// 初始化表单控件\r\nconst formRef = ref(null);\r\n\r\n// 初始化表单元素的数据\r\nconst form = ref({\r\n    id: null,\r\n    content: \"\",\r\n    description: \"\",\r\n    surveyCateId: null,\r\n    surveyItemIds: \"0\",\r\n    userId: 0\r\n})\r\n\r\n// 定义表单验证规则\r\nconst rules = ref({\r\n    content: [\r\n        {\r\n            required: true,\r\n            message: '请输入问题内容！'\r\n        }\r\n    ],\r\n    surveyCateId: [\r\n        {\r\n            required: true,\r\n            message: '请选择题目类型！'\r\n        }\r\n    ],\r\n})\r\n\r\n// 初始化类型下拉框数据\r\nconst cateList = ref([]);\r\n\r\n/**\r\n * 获取题目类型下拉框数据\r\n * @returns {Promise<void>}\r\n */\r\nconst initCateList = async () => {\r\n    // 向后端请求获取所有题目类型\r\n    const res = await axios.get('/api/survey-cate/all');\r\n    // 将返回结果赋值给cateList\r\n    cateList.value = res.data.data.surveyCates;\r\n}\r\ninitCateList();\r\n\r\n// 监听本页面dialogVisible（是否可见）值的变化\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        // 表单数据置空\r\n        form.value = {\r\n            id: null,\r\n            content: \"\",\r\n            description: \"\",\r\n            surveyCateId: null,\r\n            surveyItemIds: \"0\",\r\n            userId: 0\r\n        }\r\n    }\r\n)\r\n\r\n// 定义要调用的父组件的方法\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\n\r\n/**\r\n * 点击提交时调用\r\n */\r\nconst handleAdd = () => {\r\n    formRef.value.validate(async (valid) => {\r\n        if (valid) {\r\n            // 向后端发送新增数据请求\r\n            let res = await axios.post('/api/survey-question/add', form.value);\r\n            console.log(res)\r\n            if (res.data.success === true) {\r\n                ElMessage.success(\"执行成功！\");\r\n                // 重置表单\r\n                formRef.value.resetFields();\r\n                // 刷新父组件表格数据\r\n                emits('initList');\r\n                // 关闭该弹窗\r\n                handleClose();\r\n            } else {\r\n                ElMessage.error(res.data.msg);\r\n            }\r\n        } else {\r\n            console.log(\"error:\"+err);\r\n            ElMessage.error(\"系统错误，请联系管理员\");\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * 点击关闭或取消时调用\r\n */\r\nconst handleClose = () => {\r\n    // 重置表单\r\n    formRef.value.resetFields();\r\n    // 设置dialogVisible为不可见\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";;;;AAwCA,SAAkCA,GAAG,EAAEC,KAAK,QAAO,KAAK;AACxD,OAAOC,KAAK,MAAM,cAAc;AAChC,SAAQC,SAAS,QAAO,cAAc;;AAEtC;;;;;;;;;;;;;;;;;IAWA;IACA,MAAMC,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;;IAEzB;IACA,MAAMK,IAAI,GAAGL,GAAG,CAAC;MACbM,EAAE,EAAE,IAAI;MACRC,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,GAAG;MAClBC,MAAM,EAAE;IACZ,CAAC,CAAC;;IAEF;IACA,MAAMC,KAAK,GAAGZ,GAAG,CAAC;MACdO,OAAO,EAAE,CACL;QACIM,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC,CACJ;MACDL,YAAY,EAAE,CACV;QACII,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC;IAET,CAAC,CAAC;;IAEF;IACA,MAAMC,QAAQ,GAAGf,GAAG,CAAC,EAAE,CAAC;;IAExB;AACA;AACA;AACA;IACA,MAAMgB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B;MACA,MAAMC,GAAG,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,sBAAsB,CAAC;MACnD;MACAH,QAAQ,CAACI,KAAK,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI,CAACC,WAAW;IAC9C,CAAC;IACDL,YAAY,CAAC,CAAC;;IAEd;IACAf,KAAK,CACD,MAAIqB,KAAK,CAACC,aAAa,EACvB,MAAI;MACA;MACAlB,IAAI,CAACc,KAAK,GAAG;QACTb,EAAE,EAAE,IAAI;QACRC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,YAAY,EAAE,IAAI;QAClBC,aAAa,EAAE,GAAG;QAClBC,MAAM,EAAE;MACZ,CAAC;IACL,CACJ,CAAC;;IAED;;IAGA;AACA;AACA;IACA,MAAMa,SAAS,GAAGA,CAAA,KAAM;MACpBpB,OAAO,CAACe,KAAK,CAACM,QAAQ,CAAC,MAAOC,KAAK,IAAK;QACpC,IAAIA,KAAK,EAAE;UACP;UACA,IAAIT,GAAG,GAAG,MAAMf,KAAK,CAACyB,IAAI,CAAC,0BAA0B,EAAEtB,IAAI,CAACc,KAAK,CAAC;UAClES,OAAO,CAACC,GAAG,CAACZ,GAAG,CAAC;UAChB,IAAIA,GAAG,CAACG,IAAI,CAACU,OAAO,KAAK,IAAI,EAAE;YAC3B3B,SAAS,CAAC2B,OAAO,CAAC,OAAO,CAAC;YAC1B;YACA1B,OAAO,CAACe,KAAK,CAACY,WAAW,CAAC,CAAC;YAC3B;YACAC,KAAK,CAAC,UAAU,CAAC;YACjB;YACAC,WAAW,CAAC,CAAC;UACjB,CAAC,MAAM;YACH9B,SAAS,CAAC+B,KAAK,CAACjB,GAAG,CAACG,IAAI,CAACe,GAAG,CAAC;UACjC;QACJ,CAAC,MAAM;UACHP,OAAO,CAACC,GAAG,CAAC,QAAQ,GAACO,GAAG,CAAC;UACzBjC,SAAS,CAAC+B,KAAK,CAAC,aAAa,CAAC;QAClC;MACJ,CAAC,CAAC;IACN,CAAC;;IAED;AACA;AACA;IACA,MAAMD,WAAW,GAAGA,CAAA,KAAM;MACtB;MACA7B,OAAO,CAACe,KAAK,CAACY,WAAW,CAAC,CAAC;MAC3B;MACAC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}