{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_card = _resolveComponent(\"el-card\");\n  return _openBlock(), _createBlock(_component_el_card, null, {\n    default: _withCtx(() => [_createVNode(_component_el_table, {\n      data: $setup.tableData,\n      stripe: \"\",\n      style: {\n        \"width\": \"100%\"\n      }\n    }, null, 8 /* PROPS */, [\"data\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_card","_createVNode","_component_el_table","data","$setup","tableData","stripe","style"],"sources":["D:\\vue_project\\survey-vue\\src\\views\\survey\\components\\surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-card>\r\n        <el-table :data=\"tableData\" stripe style=\"width: 100%\">\r\n        </el-table>\r\n    </el-card>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n        }\r\n    }\r\n)\r\nconst tableData = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = async (surveyQuestionIds) => {\r\n    var questionIdList = surveyQuestionIds.split(',');\r\n    let questionList = questionIdList.map(\r\n        async (item) => {\r\n            console.log(item)\r\n            let res = await axios.get('/api/survey-question/one/' + item);\r\n            let question = res.data.data.surveyQuestion;\r\n            console.log(question)\r\n            return question;\r\n        }\r\n    )\r\n    tableData.value = questionList;\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";;;;uBACIA,YAAA,CAGUC,kBAAA;sBAFN,MACW,CADXC,YAAA,CACWC,mBAAA;MADAC,IAAI,EAAEC,MAAA,CAAAC,SAAS;MAAEC,MAAM,EAAN,EAAM;MAACC,KAAmB,EAAnB;QAAA;MAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}