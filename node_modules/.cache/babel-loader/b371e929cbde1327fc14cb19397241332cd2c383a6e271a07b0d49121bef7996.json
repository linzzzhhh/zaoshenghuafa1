{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_row = _resolveComponent(\"el-row\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    \"model-value\": \"dialogVisible\",\n    title: \"答题\",\n    width: \"40%\",\n    onClose: $setup.handleClose\n  }, {\n    default: _withCtx(() => [_createVNode(_component_el_row)]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_dialog","title","width","onClose","$setup","handleClose","_createVNode","_component_el_row"],"sources":["D:\\vue_project\\survey-vue\\src\\views\\survey\\components\\surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-row\r\n\r\n        >\r\n        </el-row>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n        }\r\n    }\r\n)\r\nconst questionList = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = async (surveyQuestionIds) => {\r\n    var questionIdList = surveyQuestionIds.split(',');\r\n    questionList.value = questionIdList.map(\r\n        async (item) => {\r\n            console.log(item)\r\n            let res = await axios.get('/api/survey-question/one/' + item);\r\n            let question = res.data.data.surveyQuestion;\r\n            console.log(question)\r\n            return question;\r\n        }\r\n    );\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";;;;uBACIA,YAAA,CAUYC,oBAAA;IATJ,aAAW,EAAC,eAAe;IAC3BC,KAAK,EAAC,IAAI;IACVC,KAAK,EAAC,KAAK;IACVC,OAAK,EAAEC,MAAA,CAAAC;;sBAEZ,MAGS,CAHTC,YAAA,CAGSC,iBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}