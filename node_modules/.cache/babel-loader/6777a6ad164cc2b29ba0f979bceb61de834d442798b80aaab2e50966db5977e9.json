{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nimport { ElMessage } from \"element-plus\";\nexport default {\n  __name: 'dialog',\n  props: {\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    },\n    dialogTitle: {\n      type: String,\n      default: '',\n      required: true\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n    const formRef = ref(null);\n    const form = ref({\n      id: -1,\n      name: \"\",\n      remark: \"\"\n    });\n    const rules = ref({\n      name: [{\n        required: true,\n        message: '请输入商品大类名称！'\n      }],\n      remark: [{\n        required: true,\n        message: '请输入商品大类描述！'\n      }]\n    });\n    watch(() => props.dialogVisible, () => {\n      let id = props.id;\n      if (id !== -1 && props.dialogVisible === true) {\n        initFormData(id);\n      }\n      if (id === -1) {\n        form.value = {\n          id: -1,\n          name: \"\",\n          remark: \"\"\n        };\n      }\n    });\n    const initFormData = async id => {\n      const res = await axios.get('good-serv/admin/bigType/detail/' + id);\n      form.value = res.data.result;\n    };\n    const handleConfirm = () => {\n      formRef.value.validate(async valid => {\n        if (valid) {\n          let res = await axios.post('good-serv/admin/bigType/save', form.value);\n          if (res.data.code == 200) {\n            ElMessage.success(\"执行成功！\");\n            formRef.value.resetFields();\n            emits('initList');\n            handleClose();\n          } else {\n            ElMessage.error(res.data.msg);\n          }\n        } else {\n          console.log(\"fail\");\n        }\n      });\n    };\n    const handleClose = () => {\n      formRef.value.resetFields();\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      formRef,\n      props,\n      form,\n      rules,\n      emits,\n      initFormData,\n      handleConfirm,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","ElMessage","formRef","form","id","name","remark","rules","required","message","props","dialogVisible","initFormData","value","res","get","data","result","handleConfirm","validate","valid","post","code","success","resetFields","emits","handleClose","error","msg","console","log"],"sources":["D:/vue_project/survey-vue/src/views/category/components/dialog.vue"],"sourcesContent":["<template>\r\n  <el-dialog\r\n    model-value=\"dialogVisible\"\r\n    :title=\"dialogTitle\"\r\n    width=\"40%\"\r\n    @close=\"handleClose\"\r\n  >\r\n      <el-form\r\n        ref=\"formRef\"\r\n        :model=\"form\"\r\n        :rules=\"rules\"\r\n        label-width=\"150px\"\r\n      >\r\n          <el-form-item label=\"分类名称\" prop=\"name\">\r\n              <el-input v-model=\"form.name\"/>\r\n          </el-form-item>\r\n          <el-form-item label=\"大类描述\" prop=\"remark\">\r\n              <el-input v-model=\"form.remark\" type=\"textarea\" :rows=\"4\"/>\r\n          </el-form-item>\r\n      </el-form>\r\n      <template #footer>\r\n          <span class=\"dialog-footer\">\r\n              <el-button @click=\"handleClose\">取消</el-button>\r\n              <el-button type=\"primary\" @click=\"handleConfirm\">确认</el-button>\r\n          </span>\r\n      </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\nconst formRef = ref(null);\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogTitle: {\r\n            type: String,\r\n            default: '',\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        }\r\n    }\r\n)\r\nconst form = ref({\r\n    id:-1,\r\n    name:\"\",\r\n    remark:\"\"\r\n})\r\nconst rules = ref({\r\n    name: [\r\n        {\r\n            required: true,\r\n            message: '请输入商品大类名称！'\r\n        }\r\n    ],\r\n    remark: [\r\n        {\r\n            required: true,\r\n            message: '请输入商品大类描述！'\r\n        }\r\n    ]\r\n})\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initFormData(id);\r\n        }\r\n        if (id === -1) {\r\n            form.value = {\r\n                id:-1,\r\n                name:\"\",\r\n                remark:\"\"\r\n            }\r\n        }\r\n    }\r\n)\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initFormData = async (id) => {\r\n    const res = await axios.get('good-serv/admin/bigType/detail/' + id);\r\n    form.value = res.data.result;\r\n}\r\nconst handleConfirm = () => {\r\n    formRef.value.validate(async (valid) => {\r\n        if (valid) {\r\n            let res = await axios.post('good-serv/admin/bigType/save', form.value);\r\n            if (res.data.code == 200) {\r\n                ElMessage.success(\"执行成功！\");\r\n                formRef.value.resetFields();\r\n                emits('initList');\r\n                handleClose();\r\n            } else {\r\n                ElMessage.error(res.data.msg);\r\n            }\r\n        } else {\r\n            console.log(\"fail\");\r\n        }\r\n    })\r\n}\r\nconst handleClose = () => {\r\n    formRef.value.resetFields();\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AA8BA,SAAkCA,GAAG,EAAEC,KAAK,QAAO,KAAK;AACxD,OAAOC,KAAK,MAAM,cAAc;AAChC,SAAQC,SAAS,QAAO,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEtC,MAAMC,OAAO,GAAGJ,GAAG,CAAC,IAAI,CAAC;IAoBzB,MAAMK,IAAI,GAAGL,GAAG,CAAC;MACbM,EAAE,EAAC,CAAC,CAAC;MACLC,IAAI,EAAC,EAAE;MACPC,MAAM,EAAC;IACX,CAAC,CAAC;IACF,MAAMC,KAAK,GAAGT,GAAG,CAAC;MACdO,IAAI,EAAE,CACF;QACIG,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC,CACJ;MACDH,MAAM,EAAE,CACJ;QACIE,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE;MACb,CAAC;IAET,CAAC,CAAC;IACFV,KAAK,CACD,MAAIW,KAAK,CAACC,aAAa,EACvB,MAAI;MACA,IAAIP,EAAE,GAAGM,KAAK,CAACN,EAAE;MACjB,IAAIA,EAAE,KAAK,CAAC,CAAC,IAAIM,KAAK,CAACC,aAAa,KAAK,IAAI,EAAE;QAC3CC,YAAY,CAACR,EAAE,CAAC;MACpB;MACA,IAAIA,EAAE,KAAK,CAAC,CAAC,EAAE;QACXD,IAAI,CAACU,KAAK,GAAG;UACTT,EAAE,EAAC,CAAC,CAAC;UACLC,IAAI,EAAC,EAAE;UACPC,MAAM,EAAC;QACX,CAAC;MACL;IACJ,CACJ,CAAC;IAED,MAAMM,YAAY,GAAG,MAAOR,EAAE,IAAK;MAC/B,MAAMU,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,iCAAiC,GAAGX,EAAE,CAAC;MACnED,IAAI,CAACU,KAAK,GAAGC,GAAG,CAACE,IAAI,CAACC,MAAM;IAChC,CAAC;IACD,MAAMC,aAAa,GAAGA,CAAA,KAAM;MACxBhB,OAAO,CAACW,KAAK,CAACM,QAAQ,CAAC,MAAOC,KAAK,IAAK;QACpC,IAAIA,KAAK,EAAE;UACP,IAAIN,GAAG,GAAG,MAAMd,KAAK,CAACqB,IAAI,CAAC,8BAA8B,EAAElB,IAAI,CAACU,KAAK,CAAC;UACtE,IAAIC,GAAG,CAACE,IAAI,CAACM,IAAI,IAAI,GAAG,EAAE;YACtBrB,SAAS,CAACsB,OAAO,CAAC,OAAO,CAAC;YAC1BrB,OAAO,CAACW,KAAK,CAACW,WAAW,CAAC,CAAC;YAC3BC,KAAK,CAAC,UAAU,CAAC;YACjBC,WAAW,CAAC,CAAC;UACjB,CAAC,MAAM;YACHzB,SAAS,CAAC0B,KAAK,CAACb,GAAG,CAACE,IAAI,CAACY,GAAG,CAAC;UACjC;QACJ,CAAC,MAAM;UACHC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACvB;MACJ,CAAC,CAAC;IACN,CAAC;IACD,MAAMJ,WAAW,GAAGA,CAAA,KAAM;MACtBxB,OAAO,CAACW,KAAK,CAACW,WAAW,CAAC,CAAC;MAC3BC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}