{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    \"model-value\": \"dialogVisible\",\n    title: \"选项管理\",\n    width: \"50%\",\n    onClose: $setup.handleClose,\n    center: \"\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 请选择要组卷的题目： \"), _createVNode(_component_el_table, {\n      data: $setup.tableData,\n      stripe: \"\",\n      style: {\n        \"width\": \"100%\"\n      }\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_table_column, {\n        prop: \"id\",\n        label: \"ID\",\n        width: \"80\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"content\",\n        label: \"问题\",\n        width: \"250\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"description\",\n        label: \"描述\",\n        width: \"250\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"surveyCateId\",\n        label: \"分类ID\",\n        width: \"120\",\n        formatter: $setup.cateFormatter\n      }), _createVNode(_component_el_table_column, {\n        prop: \"surveyItemIds\",\n        label: \"选项ID\",\n        width: \"120\"\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\"])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_dialog","title","width","onClose","$setup","handleClose","center","_createVNode","_component_el_table","data","tableData","stripe","style","_component_el_table_column","prop","label","formatter","cateFormatter"],"sources":["D:\\vue_project\\survey-vue\\src\\views\\assembly\\components\\editQuestion.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n        model-value=\"dialogVisible\"\r\n        title=\"选项管理\"\r\n        width=\"50%\"\r\n        @close=\"handleClose\"\r\n        center\r\n    >\r\n        请选择要组卷的题目：\r\n        <el-table :data=\"tableData\" stripe style=\"width: 100%\">\r\n            <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n            <el-table-column prop=\"content\" label=\"问题\" width=\"250\" />\r\n            <el-table-column prop=\"description\" label=\"描述\" width=\"250\" />\r\n            <el-table-column prop=\"surveyCateId\" label=\"分类ID\" width=\"120\" :formatter=\"cateFormatter\"/>\r\n            <el-table-column prop=\"surveyItemIds\" label=\"选项ID\" width=\"120\" />\r\n        </el-table>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage, ElMessageBox} from \"element-plus\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        }\r\n    }\r\n);\r\nconst tableData = ref([]);\r\nconst initQuestionList = async () => {\r\n    const res = await axios.get('/api/survey-question/all');\r\n    tableData.value = res.data.data.surveyQuestions;\r\n};\r\nconst cateFormatter = (row) => {\r\n    switch (row.surveyCateId) {\r\n        case 1:\r\n            return \"选择题\"\r\n        case 2:\r\n            return \"判断题\"\r\n        case 3:\r\n            return \"简答题\"\r\n        default:\r\n            return row.surveyCateId\r\n    }\r\n}\r\nwatch(\r\n    () => props.dialogVisible,\r\n    () => {\r\n        if (props.dialogVisible === true) {\r\n            initQuestionList();\r\n        }\r\n    },\r\n);\r\nconst emits = defineEmits(['update:modelValue']);\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;;;;uBACIA,YAAA,CAeYC,oBAAA;IAdR,aAAW,EAAC,eAAe;IAC3BC,KAAK,EAAC,MAAM;IACZC,KAAK,EAAC,KAAK;IACVC,OAAK,EAAEC,MAAA,CAAAC,WAAW;IACnBC,MAAM,EAAN;;sBACH,MAEG,C,iBAFH,cAEG,GAAAC,YAAA,CAMWC,mBAAA;MANAC,IAAI,EAAEL,MAAA,CAAAM,SAAS;MAAEC,MAAM,EAAN,EAAM;MAACC,KAAmB,EAAnB;QAAA;MAAA;;wBAC/B,MAAmD,CAAnDL,YAAA,CAAmDM,0BAAA;QAAlCC,IAAI,EAAC,IAAI;QAACC,KAAK,EAAC,IAAI;QAACb,KAAK,EAAC;UAC5CK,YAAA,CAAyDM,0BAAA;QAAxCC,IAAI,EAAC,SAAS;QAACC,KAAK,EAAC,IAAI;QAACb,KAAK,EAAC;UACjDK,YAAA,CAA6DM,0BAAA;QAA5CC,IAAI,EAAC,aAAa;QAACC,KAAK,EAAC,IAAI;QAACb,KAAK,EAAC;UACrDK,YAAA,CAA0FM,0BAAA;QAAzEC,IAAI,EAAC,cAAc;QAACC,KAAK,EAAC,MAAM;QAACb,KAAK,EAAC,KAAK;QAAEc,SAAS,EAAEZ,MAAA,CAAAa;UAC1EV,YAAA,CAAiEM,0BAAA;QAAhDC,IAAI,EAAC,eAAe;QAACC,KAAK,EAAC,MAAM;QAACb,KAAK,EAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}