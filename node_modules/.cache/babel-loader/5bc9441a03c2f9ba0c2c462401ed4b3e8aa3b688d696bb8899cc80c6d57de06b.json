{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_table_column = _resolveComponent(\"el-table-column\");\n  const _component_el_table = _resolveComponent(\"el-table\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    \"model-value\": \"dialogVisible\",\n    title: \"选项管理\",\n    width: \"50%\",\n    onClose: $setup.handleClose,\n    center: \"\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\" 请选择要组卷的题目： \"), _createVNode(_component_el_table, {\n      data: $setup.tableData,\n      stripe: \"\",\n      onSelectionChange: $setup.handleSelectionChange,\n      style: {\n        \"width\": \"100%\"\n      }\n    }, {\n      default: _withCtx(() => [_createCommentVNode(\" 复选框 \"), _createVNode(_component_el_table_column, {\n        type: \"selection\",\n        width: \"50\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"id\",\n        label: \"ID\",\n        width: \"80\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"content\",\n        label: \"问题\",\n        width: \"250\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"description\",\n        label: \"描述\",\n        width: \"250\"\n      }), _createVNode(_component_el_table_column, {\n        prop: \"surveyCateId\",\n        label: \"分类ID\",\n        width: \"120\",\n        formatter: $setup.cateFormatter\n      }), _createVNode(_component_el_table_column, {\n        prop: \"surveyItemIds\",\n        label: \"选项ID\",\n        width: \"120\"\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"data\"]), _createVNode(_component_el_button, {\n      type: \"primary\",\n      onClick: $setup.handleConfirm\n    }, {\n      default: _withCtx(() => [_createTextVNode(\"确定组卷\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_dialog","title","width","onClose","$setup","handleClose","center","_createVNode","_component_el_table","data","tableData","stripe","onSelectionChange","handleSelectionChange","style","_createCommentVNode","_component_el_table_column","type","prop","label","formatter","cateFormatter","_component_el_button","onClick","handleConfirm"],"sources":["D:\\vue_project\\survey-vue\\src\\views\\assembly\\components\\editQuestion.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n        model-value=\"dialogVisible\"\r\n        title=\"选项管理\"\r\n        width=\"50%\"\r\n        @close=\"handleClose\"\r\n        center\r\n    >\r\n        请选择要组卷的题目：\r\n        <el-table :data=\"tableData\" stripe @selection-change=\"handleSelectionChange\" style=\"width: 100%\">\r\n            <!-- 复选框 -->\r\n            <el-table-column type=\"selection\" width=\"50\"></el-table-column>\r\n            <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n            <el-table-column prop=\"content\" label=\"问题\" width=\"250\" />\r\n            <el-table-column prop=\"description\" label=\"描述\" width=\"250\" />\r\n            <el-table-column prop=\"surveyCateId\" label=\"分类ID\" width=\"120\" :formatter=\"cateFormatter\"/>\r\n            <el-table-column prop=\"surveyItemIds\" label=\"选项ID\" width=\"120\" />\r\n        </el-table>\r\n        <el-button type=\"primary\" @click=\"handleConfirm\">确定组卷</el-button>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage} from \"element-plus\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        }\r\n    }\r\n);\r\nconst tableData = ref([]);\r\nconst initQuestionList = async () => {\r\n    const res = await axios.get('/api/survey-question/all');\r\n    tableData.value = res.data.data.surveyQuestions;\r\n};\r\nconst cateFormatter = (row) => {\r\n    switch (row.surveyCateId) {\r\n        case 1:\r\n            return \"选择题\"\r\n        case 2:\r\n            return \"判断题\"\r\n        case 3:\r\n            return \"简答题\"\r\n        default:\r\n            return row.surveyCateId\r\n    }\r\n}\r\nwatch(\r\n    () => props.dialogVisible,\r\n    () => {\r\n        if (props.dialogVisible === true) {\r\n            initQuestionList();\r\n            initData(props.id);\r\n        }\r\n    },\r\n);\r\nconst questionIds = ref(\"0\");\r\nconst handleSelectionChange = (val) => {\r\n    let idList = val.map((item) =>{\r\n        return item.id;\r\n    });\r\n    if (idList.length === 0) {\r\n        questionIds.value = \"0\";\r\n        return;\r\n    }\r\n    let itemIds = \"\";\r\n    idList.forEach((item, index)=>{\r\n        itemIds += item;\r\n        if (index !== idList.length-1) {\r\n            itemIds += \",\";\r\n        }\r\n    })\r\n    console.log(itemIds);\r\n    questionIds.value = itemIds;\r\n}\r\nconst assembly = ref({});\r\nconst initData = async (id) => {\r\n    const res = await axios.get('/api/survey-assembly/one/' + id);\r\n    assembly.value = res.data.data.surveyAssembly;\r\n}\r\nconst handleConfirm = async () => {\r\n    assembly.value.surveyQuestonIds = questionIds.value;\r\n    let res = await axios.post('/api/survey-assembly/edit', assembly.value);\r\n    if (res.data.success === true) {\r\n        ElMessage.success(\"执行成功！\");\r\n        emits('initList');\r\n        handleClose();\r\n    } else {\r\n        ElMessage.error(res.data.msg);\r\n    }\r\n}\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":";;;;;;uBACIA,YAAA,CAkBYC,oBAAA;IAjBR,aAAW,EAAC,eAAe;IAC3BC,KAAK,EAAC,MAAM;IACZC,KAAK,EAAC,KAAK;IACVC,OAAK,EAAEC,MAAA,CAAAC,WAAW;IACnBC,MAAM,EAAN;;sBACH,MAEG,C,iBAFH,cAEG,GAAAC,YAAA,CAQWC,mBAAA;MARAC,IAAI,EAAEL,MAAA,CAAAM,SAAS;MAAEC,MAAM,EAAN,EAAM;MAAEC,iBAAgB,EAAER,MAAA,CAAAS,qBAAqB;MAAEC,KAAmB,EAAnB;QAAA;MAAA;;wBACzE,MAAY,CAAZC,mBAAA,SAAY,EACZR,YAAA,CAA+DS,0BAAA;QAA9CC,IAAI,EAAC,WAAW;QAACf,KAAK,EAAC;UACxCK,YAAA,CAAmDS,0BAAA;QAAlCE,IAAI,EAAC,IAAI;QAACC,KAAK,EAAC,IAAI;QAACjB,KAAK,EAAC;UAC5CK,YAAA,CAAyDS,0BAAA;QAAxCE,IAAI,EAAC,SAAS;QAACC,KAAK,EAAC,IAAI;QAACjB,KAAK,EAAC;UACjDK,YAAA,CAA6DS,0BAAA;QAA5CE,IAAI,EAAC,aAAa;QAACC,KAAK,EAAC,IAAI;QAACjB,KAAK,EAAC;UACrDK,YAAA,CAA0FS,0BAAA;QAAzEE,IAAI,EAAC,cAAc;QAACC,KAAK,EAAC,MAAM;QAACjB,KAAK,EAAC,KAAK;QAAEkB,SAAS,EAAEhB,MAAA,CAAAiB;UAC1Ed,YAAA,CAAiES,0BAAA;QAAhDE,IAAI,EAAC,eAAe;QAACC,KAAK,EAAC,MAAM;QAACjB,KAAK,EAAC;;;iCAE7DK,YAAA,CAAiEe,oBAAA;MAAtDL,IAAI,EAAC,SAAS;MAAEM,OAAK,EAAEnB,MAAA,CAAAoB;;wBAAe,MAAI,C,iBAAJ,MAAI,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}