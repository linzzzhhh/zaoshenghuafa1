{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_row = _resolveComponent(\"el-row\");\n  const _component_el_dialog = _resolveComponent(\"el-dialog\");\n  return _openBlock(), _createBlock(_component_el_dialog, {\n    \"model-value\": \"dialogVisible\",\n    title: \"答题\",\n    width: \"40%\",\n    onClose: $setup.handleClose\n  }, {\n    default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.questionList, (item, index) => {\n      return _openBlock(), _createBlock(_component_el_row, {\n        key: item.id\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"span\", null, _toDisplayString(index) + \"、\" + _toDisplayString(item.content), 1 /* TEXT */), item ? (_openBlock(), _createElementBlock(\"span\", _hoisted_1, _toDisplayString(item.name), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]),\n        _: 2 /* DYNAMIC */\n      }, 1024 /* DYNAMIC_SLOTS */);\n    }), 128 /* KEYED_FRAGMENT */))]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_component_el_dialog","title","width","onClose","$setup","handleClose","_createElementBlock","_Fragment","_renderList","questionList","item","index","_component_el_row","key","id","_createElementVNode","_toDisplayString","content","_hoisted_1","name"],"sources":["D:\\vue_project\\survey-vue\\src\\views\\survey\\components\\surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-row\r\n            v-for=\"(item,index) in questionList\"\r\n            :key=\"item.id\"\r\n        >\r\n            <span>{{index}}、{{item.content}}</span>\r\n            <span v-if=\"item\">{{item.name}}</span>\r\n        </el-row>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n        }\r\n    }\r\n)\r\nconst questionList = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = async (surveyQuestionIds) => {\r\n    var questionIdList = surveyQuestionIds.split(',');\r\n    questionList.value = questionIdList.map(\r\n        async (item) => {\r\n            console.log(item)\r\n            let res = await axios.get('/api/survey-question/one/' + item);\r\n            let question = res.data.data.surveyQuestion;\r\n            console.log(question)\r\n            return question;\r\n        }\r\n    );\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":";;;;;;;uBACIA,YAAA,CAaYC,oBAAA;IAZJ,aAAW,EAAC,eAAe;IAC3BC,KAAK,EAAC,IAAI;IACVC,KAAK,EAAC,KAAK;IACVC,OAAK,EAAEC,MAAA,CAAAC;;sBAGR,MAAoC,E,kBADxCC,mBAAA,CAMSC,SAAA,QAAAC,WAAA,CALkBJ,MAAA,CAAAK,YAAY,GAA3BC,IAAI,EAACC,KAAK;2BADtBZ,YAAA,CAMSa,iBAAA;QAJJC,GAAG,EAAEH,IAAI,CAACI;;0BAEX,MAAuC,CAAvCC,mBAAA,CAAuC,cAAAC,gBAAA,CAA/BL,KAAK,IAAE,GAAC,GAAAK,gBAAA,CAAEN,IAAI,CAACO,OAAO,kBAClBP,IAAI,I,cAAhBJ,mBAAA,CAAsC,QAAAY,UAAA,EAAAF,gBAAA,CAAlBN,IAAI,CAACS,IAAI,oB"},"metadata":{},"sourceType":"module","externalDependencies":[]}