{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, withCtx as _withCtx, unref as _unref, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nimport { ref } from \"vue\";\nimport axios from \"@/util/axios\";\nimport { Edit } from \"@element-plus/icons-vue\";\nimport SurveyDialog from \"@/views/survey/components/surveyDialog.vue\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\n\n// 数据定义\n\nexport default {\n  __name: 'index',\n  setup(__props) {\n    const tableData = ref([]); // 表格数据\n    const dialogVisible = ref(false); // 控制SurveyDialog是否可见\n    const assemblyId = ref(-1); // 组卷ID，用于SurveyDialog的数据初始化\n    const questionIds = ref(\"0\"); // 组卷问题IDs，用于SurveyDialog（答题界面）的数据初始化\n\n    /**\r\n     * 获取表格数据\r\n     * @returns {Promise<void>}\r\n     */\n    const initList = async () => {\n      // 请求数据\n      const res = await axios.get('/api/survey-assembly/all');\n      // 赋值给tableData\n      tableData.value = res.data.data.surveyAssemblys;\n    };\n    initList();\n\n    /**\r\n     * 点击发布时调用\r\n     * @param row\r\n     */\n    const handlePublished = row => {\n      ElMessageBox.confirm('您确定要发布该问卷吗？发布后不可再编辑！', '系统提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        // 仅修改published的值\n        row.published = \"发布\";\n        // 向后端发送修改数据请求\n        let res = await axios.post('/api/survey-assembly/edit', row);\n        if (res.data.success === true) {\n          ElMessage({\n            type: 'success',\n            message: '执行成功'\n          });\n          // 刷新表格数据\n          initList();\n        } else {\n          ElMessage({\n            type: 'error',\n            message: res.data.msg\n          });\n        }\n      }).catch(() => {});\n    };\n\n    /**\r\n     * 点击去答题时调用\r\n     * @param id\r\n     * @param password\r\n     * @param surveyQuestionIds\r\n     * @returns {Promise<void>}\r\n     */\n    const handleSurveyDialog = async (id, password, surveyQuestionIds) => {\n      // 如果没密码\n      if (typeof password === 'undefined' || password == null || password === '') {\n        // 传入组卷ID\n        assemblyId.value = id;\n        // 传入该组卷的问题IDs\n        questionIds.value = surveyQuestionIds;\n        // 答题界面设为可见\n        dialogVisible.value = true;\n      }\n      // 如果有密码\n      else {\n        ElMessageBox.prompt('请输入问卷密码', '身份验证', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消'\n        }) // 输入密码，点击确定后执行以下\n        .then(({\n          value\n        }) => {\n          // 如果密码正确\n          if (value === password) {\n            ElMessage({\n              type: 'success',\n              message: '密码正确'\n            });\n            // 传入组卷ID\n            assemblyId.value = id;\n            // 传入该组卷的问题IDs\n            questionIds.value = surveyQuestionIds;\n            // 答题界面设为可见\n            dialogVisible.value = true;\n          } else {\n            // 如果密码错误\n            // 弹窗提示密码错误\n            ElMessage({\n              type: 'error',\n              message: '密码错误'\n            });\n          }\n        }).catch(() => {});\n      }\n    };\n    return (_ctx, _cache) => {\n      const _component_el_table_column = _resolveComponent(\"el-table-column\");\n      const _component_el_button = _resolveComponent(\"el-button\");\n      const _component_el_table = _resolveComponent(\"el-table\");\n      const _component_el_card = _resolveComponent(\"el-card\");\n      return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_el_card, null, {\n        default: _withCtx(() => [_createVNode(_component_el_table, {\n          data: tableData.value,\n          stripe: \"\",\n          style: {\n            \"width\": \"100%\"\n          }\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_table_column, {\n            prop: \"id\",\n            label: \"ID\",\n            width: \"80\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"name\",\n            label: \"问卷名称\",\n            width: \"250\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"surveyQuestonIds\",\n            label: \"题目ID\",\n            width: \"250\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"published\",\n            label: \"问卷状态\",\n            width: \"250\"\n          }), _createVNode(_component_el_table_column, {\n            prop: \"action\",\n            label: \"操作\"\n          }, {\n            default: _withCtx(scope => [_createVNode(_component_el_button, {\n              type: \"danger\",\n              disabled: scope.row.published === '未发布' ? false : true,\n              onClick: $event => handlePublished(scope.row)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\" 发布 \")]),\n              _: 2\n            }, 1032, [\"disabled\", \"onClick\"]), _createVNode(_component_el_button, {\n              type: \"primary\",\n              icon: _unref(Edit),\n              disabled: scope.row.published === '未发布' ? true : false,\n              onClick: $event => handleSurveyDialog(scope.row.id, scope.row.password, scope.row.surveyQuestonIds)\n            }, {\n              default: _withCtx(() => [_createTextVNode(\" 去答题 \")]),\n              _: 2\n            }, 1032, [\"icon\", \"disabled\", \"onClick\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"data\"])]),\n        _: 1\n      }), _createVNode(SurveyDialog, {\n        modelValue: dialogVisible.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => dialogVisible.value = $event),\n        id: assemblyId.value,\n        dialogVisible: dialogVisible.value,\n        surveyQuestionIds: questionIds.value,\n        onInitList: initList\n      }, null, 8, [\"modelValue\", \"id\", \"dialogVisible\", \"surveyQuestionIds\"])], 64);\n    };\n  }\n};","map":{"version":3,"names":["ref","axios","Edit","SurveyDialog","ElMessage","ElMessageBox","tableData","dialogVisible","assemblyId","questionIds","initList","res","get","value","data","surveyAssemblys","handlePublished","row","confirm","confirmButtonText","cancelButtonText","type","then","published","post","success","message","msg","catch","handleSurveyDialog","id","password","surveyQuestionIds","prompt"],"sources":["C:/Users/林ＺＨ/Desktop/survey/src/views/survey/index.vue"],"sourcesContent":["<template>\r\n    <el-card>\r\n        <el-table :data=\"tableData\" stripe style=\"width: 100%\">\r\n            <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n            <el-table-column prop=\"name\" label=\"问卷名称\" width=\"250\" />\r\n            <el-table-column prop=\"surveyQuestonIds\" label=\"题目ID\" width=\"250\" />\r\n            <el-table-column prop=\"published\" label=\"问卷状态\" width=\"250\" />\r\n            <el-table-column prop=\"action\" label=\"操作\">\r\n                <template v-slot=\"scope\">\r\n                    <el-button type=\"danger\"\r\n                               :disabled=\"scope.row.published === '未发布' ? false : true\"\r\n                               @click=\"handlePublished(scope.row)\">\r\n                        发布\r\n                    </el-button>\r\n                    <el-button type=\"primary\" :icon=\"Edit\"\r\n                               :disabled=\"scope.row.published === '未发布' ? true : false\"\r\n                               @click=\"handleSurveyDialog(scope.row.id, scope.row.password, scope.row.surveyQuestonIds)\">\r\n                        去答题\r\n                    </el-button>\r\n                </template>\r\n            </el-table-column>\r\n        </el-table>\r\n    </el-card>\r\n    <SurveyDialog v-model=\"dialogVisible\"\r\n                  :id=\"assemblyId\"\r\n                  :dialogVisible=\"dialogVisible\"\r\n                  :surveyQuestionIds=\"questionIds\"\r\n                  @initList=\"initList\"\r\n    ></SurveyDialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {Edit} from \"@element-plus/icons-vue\";\r\nimport SurveyDialog from \"@/views/survey/components/surveyDialog.vue\";\r\nimport {ElMessage, ElMessageBox} from \"element-plus\";\r\n\r\n// 数据定义\r\nconst tableData = ref([]); // 表格数据\r\nconst dialogVisible = ref(false); // 控制SurveyDialog是否可见\r\nconst assemblyId = ref(-1); // 组卷ID，用于SurveyDialog的数据初始化\r\nconst questionIds = ref(\"0\"); // 组卷问题IDs，用于SurveyDialog（答题界面）的数据初始化\r\n\r\n/**\r\n * 获取表格数据\r\n * @returns {Promise<void>}\r\n */\r\nconst initList = async () => {\r\n    // 请求数据\r\n    const res = await axios.get('/api/survey-assembly/all');\r\n    // 赋值给tableData\r\n    tableData.value = res.data.data.surveyAssemblys;\r\n}\r\ninitList();\r\n\r\n/**\r\n * 点击发布时调用\r\n * @param row\r\n */\r\nconst handlePublished = (row) => {\r\n    ElMessageBox.confirm(\r\n        '您确定要发布该问卷吗？发布后不可再编辑！',\r\n        '系统提示',\r\n        {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消',\r\n            type: 'warning',\r\n        }\r\n    ).then(async () => {\r\n        // 仅修改published的值\r\n        row.published = \"发布\";\r\n        // 向后端发送修改数据请求\r\n        let res = await axios.post('/api/survey-assembly/edit', row);\r\n        if (res.data.success === true) {\r\n            ElMessage({\r\n                type: 'success',\r\n                message: '执行成功',\r\n            })\r\n            // 刷新表格数据\r\n            initList();\r\n        } else {\r\n            ElMessage({\r\n                type: 'error',\r\n                message: res.data.msg,\r\n            })\r\n        }\r\n    }).catch(() => {\r\n\r\n    })\r\n}\r\n\r\n/**\r\n * 点击去答题时调用\r\n * @param id\r\n * @param password\r\n * @param surveyQuestionIds\r\n * @returns {Promise<void>}\r\n */\r\nconst handleSurveyDialog = async (id, password, surveyQuestionIds) => {\r\n    // 如果没密码\r\n    if (typeof password === 'undefined' || password == null || password === '') {\r\n        // 传入组卷ID\r\n        assemblyId.value = id;\r\n        // 传入该组卷的问题IDs\r\n        questionIds.value= surveyQuestionIds;\r\n        // 答题界面设为可见\r\n        dialogVisible.value = true;\r\n    }\r\n    // 如果有密码\r\n    else {\r\n        ElMessageBox.prompt('请输入问卷密码', '身份验证', {\r\n            confirmButtonText: '确定',\r\n            cancelButtonText: '取消'\r\n        })  // 输入密码，点击确定后执行以下\r\n            .then(({ value }) => {\r\n                // 如果密码正确\r\n                if (value === password) {\r\n                    ElMessage({\r\n                        type: 'success',\r\n                        message: '密码正确',\r\n                    });\r\n                    // 传入组卷ID\r\n                    assemblyId.value = id;\r\n                    // 传入该组卷的问题IDs\r\n                    questionIds.value= surveyQuestionIds;\r\n                    // 答题界面设为可见\r\n                    dialogVisible.value = true;\r\n                } else {    // 如果密码错误\r\n                    // 弹窗提示密码错误\r\n                    ElMessage({\r\n                        type: 'error',\r\n                        message: '密码错误',\r\n                    });\r\n                }\r\n            })\r\n            .catch(() => {})\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}