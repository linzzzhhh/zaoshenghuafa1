{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nexport default {\n  __name: 'surveyDialog',\n  props: {\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    },\n    surveyQuestionIds: {\n      type: String,\n      default: \"0\",\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n    watch(() => props.dialogVisible, () => {\n      let id = props.id;\n      if (id !== -1 && props.dialogVisible === true) {\n        initData(props.surveyQuestionIds);\n        console.log(questionList.value);\n      }\n    });\n    const questionList = ref([]);\n    const initData = async surveyQuestionIds => {\n      let questionIdList = surveyQuestionIds.split(',');\n      let list = await Promise.all(questionIdList.map(async item => {\n        let res = await axios.get('/api/survey-question/one/' + item);\n        let question = res.data.data.surveyQuestion;\n        console.log(question);\n        return question;\n      }));\n      questionList.value = list;\n    };\n    const handleClose = () => {\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      props,\n      questionList,\n      emits,\n      initData,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","props","dialogVisible","id","initData","surveyQuestionIds","console","log","questionList","value","questionIdList","split","list","Promise","all","map","item","res","get","question","data","surveyQuestion","handleClose","emits"],"sources":["D:/vue_project/survey-vue/src/views/survey/components/surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-row style=\"margin-bottom: 50px\"\r\n            v-for=\"(item,index) in questionList\"\r\n            :key=\"item.id\"\r\n        >\r\n            <el-row class=\"question\">\r\n                <span>{{index+1}}、</span><span>{{item.content}}</span>\r\n            </el-row>\r\n<!--            如果有描述则显示描述-->\r\n            <span v-if=\"item.description!=''\">{{item.description}}</span>\r\n<!--            如果是选择题-->\r\n            <span v-if=\"item.surveyCateId===1\">\r\n选择题\r\n            </span>\r\n<!--            如果是判断题-->\r\n            <span v-if=\"item.surveyCateId===2\">\r\n判断题\r\n            </span>\r\n<!--            如果是简答题或其他-->\r\n            <span v-if=\"item.surveyCateId!==1 && item.surveyCateId!==2\">\r\n简答题或其他\r\n            </span>\r\n        </el-row>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n            console.log(questionList.value)\r\n        }\r\n    }\r\n)\r\nconst questionList = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = async (surveyQuestionIds) => {\r\n    let questionIdList = surveyQuestionIds.split(',');\r\n    let list = await Promise.all(\r\n        questionIdList.map(\r\n            async (item) => {\r\n                let res = await axios.get('/api/survey-question/one/' + item);\r\n                let question = res.data.data.surveyQuestion;\r\n                console.log(question)\r\n                return question;\r\n            }\r\n        )\r\n    )\r\n    questionList.value = list;\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.question {\r\n  margin-bottom: 15px;\r\n  font-size: large;\r\n}\r\n</style>"],"mappings":"AAiCA,SAAkCA,GAAG,EAAEC,KAAK,QAAO,KAAK;AACxD,OAAOC,KAAK,MAAM,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqBhCD,KAAK,CACD,MAAIE,KAAK,CAACC,aAAa,EACvB,MAAI;MACA,IAAIC,EAAE,GAAGF,KAAK,CAACE,EAAE;MACjB,IAAIA,EAAE,KAAK,CAAC,CAAC,IAAIF,KAAK,CAACC,aAAa,KAAK,IAAI,EAAE;QAC3CE,QAAQ,CAACH,KAAK,CAACI,iBAAiB,CAAC;QACjCC,OAAO,CAACC,GAAG,CAACC,YAAY,CAACC,KAAK,CAAC;MACnC;IACJ,CACJ,CAAC;IACD,MAAMD,YAAY,GAAGV,GAAG,CAAC,EAAE,CAAC;IAE5B,MAAMM,QAAQ,GAAG,MAAOC,iBAAiB,IAAK;MAC1C,IAAIK,cAAc,GAAGL,iBAAiB,CAACM,KAAK,CAAC,GAAG,CAAC;MACjD,IAAIC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAG,CACxBJ,cAAc,CAACK,GAAG,CACd,MAAOC,IAAI,IAAK;QACZ,IAAIC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,2BAA2B,GAAGF,IAAI,CAAC;QAC7D,IAAIG,QAAQ,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI,CAACC,cAAc;QAC3Cf,OAAO,CAACC,GAAG,CAACY,QAAQ,CAAC;QACrB,OAAOA,QAAQ;MACnB,CACJ,CACJ,CAAC;MACDX,YAAY,CAACC,KAAK,GAAGG,IAAI;IAC7B,CAAC;IACD,MAAMU,WAAW,GAAGA,CAAA,KAAM;MACtBC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}