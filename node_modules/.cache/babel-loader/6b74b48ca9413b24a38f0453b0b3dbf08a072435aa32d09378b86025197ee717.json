{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nexport default {\n  __name: 'surveyDialog2',\n  props: {\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    },\n    surveyQuestionIds: {\n      type: String,\n      default: \"0\",\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n    watch(() => props.dialogVisible, () => {\n      let id = props.id;\n      if (id !== -1 && props.dialogVisible === true) {\n        initData(props.surveyQuestionIds);\n      }\n    });\n    const form = ref({\n      questionList: [{\n        id: 0,\n        content: \"\",\n        description: \"\",\n        surveyCateId: 1,\n        itemList: [],\n        result: \"\"\n      }]\n    });\n    const handleChange = (val, index) => {\n      console.log(val.srcElement.value);\n      console.log(index);\n      form.value.questionList[index].result = val.srcElement.value;\n      console.log(form.value);\n    };\n    const handleCheck = (val, index, i) => {\n      let checked = form.value.questionList[index].itemList[i].checked;\n      // itemList.forEach((item) => {\n      //     if (item.id === itemId) {\n      //         item.checked = !item.checked;\n      //     }\n      // });\n      // form.value.questionList[index].itemList = itemList;\n      console.log(i);\n      console.log(checked);\n      form.value.questionList[index].itemList[i].checked = !checked;\n      console.log(form.value.questionList[index].itemList[i].checked);\n    };\n    // const questionList = ref([]);\n\n    const initData = async surveyQuestionIds => {\n      // 根据题目id串获取问卷题目集合\n      let res = await axios.get('/api/survey-question/getSurveyQuestions/' + surveyQuestionIds);\n      let list = res.data.data.surveyQuestions;\n      // 遍历题目集合\n      for (var i = 0; i < list.length; i++) {\n        // 如果是选择题，加载选项\n        if (list[i].surveyCateId === 1 || list[i].surveyCateId === 2) {\n          let res2 = await axios.get('/api/survey-item/getSurveyItems/' + list[i].surveyItemIds);\n          let itemList = res2.data.data.surveyItems;\n          // 选项ID为int类型不能反显，转为string\n          itemList.forEach(item => item.id = item.id.toString());\n          // 如果是多选题，添加checked属性\n          if (list[i].surveyCateId === 2) {\n            itemList.forEach(item => item.checked = false);\n          }\n          list[i].itemList = itemList;\n        } else {\n          list[i].itemList = [];\n        }\n        list[i].result = \"\";\n      }\n      // questionList.value = list;\n      form.value.questionList = list;\n      console.log(list);\n      console.log(form.value.questionList);\n    };\n    const handleClose = () => {\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      props,\n      form,\n      handleChange,\n      handleCheck,\n      emits,\n      initData,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","props","dialogVisible","id","initData","surveyQuestionIds","form","questionList","content","description","surveyCateId","itemList","result","handleChange","val","index","console","log","srcElement","value","handleCheck","i","checked","res","get","list","data","surveyQuestions","length","res2","surveyItemIds","surveyItems","forEach","item","toString","handleClose","emits"],"sources":["D:/vue_project/survey-vue/src/views/survey/components/surveyDialog2.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-form :model=\"form\">\r\n            <el-row style=\"margin-bottom: 50px\"\r\n                    v-for=\"(question,index) in form.questionList\"\r\n                    :key=\"question.id\"\r\n            >\r\n                <el-col :span=\"24\">\r\n                    <!--                题目内容-->\r\n                    <el-row class=\"question\">\r\n                        <el-col :span=\"1\">{{index+1}}、</el-col>\r\n                        <el-col :span=\"23\">{{question.content}}</el-col>\r\n                    </el-row>\r\n                    <!--            如果有描述则显示描述-->\r\n                    <el-row v-if=\"question.description!=''\" class=\"description\">\r\n                        注：<span>{{question.description}}</span>\r\n                    </el-row>\r\n                    <!--                题目选项或答题区-->\r\n                    <el-row class=\"result\">\r\n                        <!--单选题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId===1\">\r\n                            <el-row>\r\n                                <el-form-item @change=\"(val)=>handleChange(val,index)\">\r\n                                    <el-radio-group v-model=\"question.result\">\r\n                                        <el-radio class=\"item\"\r\n                                                  v-for=\"(option,i) in question.itemList\"\r\n                                                  :key=\"i\"\r\n                                                  v-model=\"question.result\"\r\n                                                  :label=\"option.id\"\r\n                                        >\r\n                                            {{option.item}}\r\n                                        </el-radio>\r\n                                    </el-radio-group>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                        <!--多选题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId===2\">\r\n                            <el-row>\r\n                                <el-form-item>\r\n                                    <el-checkbox-group v-model=\"question.result\">\r\n                                        <el-checkbox class=\"item\"\r\n                                                     v-for=\"(option,i) in question.itemList\"\r\n                                                     :key=\"i\"\r\n                                                     :label=\"option.id\"\r\n                                                     @click=\"(val)=>handleCheck(val,index,i)\"\r\n                                                     :checked=\"option.checked\"\r\n                                        >\r\n                                            {{option.item}}\r\n                                        </el-checkbox>\r\n                                    </el-checkbox-group>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                        <!--判断题-->\r\n                        <el-col :span=\"24\" v-if=\"question.surveyCateId===3\">\r\n                            <el-row>\r\n                                <el-form-item @change=\"(val)=>handleChange(val,index)\">\r\n                                    <el-radio-group v-model=\"question.result\">\r\n                                        <el-radio label=\"true\">是</el-radio>\r\n                                        <el-radio label=\"false\">否</el-radio>\r\n                                    </el-radio-group>\r\n                                </el-form-item>\r\n                            </el-row>\r\n                        </el-col>\r\n                        <!--如果是简答题或其他-->\r\n                        <span v-if=\"question.surveyCateId!==1 && question.surveyCateId!==2 && question.surveyCateId!==3\">\r\n                          <el-form-item @blur.native.capture=\"(val)=>handleChange(val,index)\">\r\n                            <el-input type=\"textarea\" style=\"width: 500px\" v-model=\"question.result\"/>\r\n                          </el-form-item>\r\n                        </span>\r\n                    </el-row>\r\n                </el-col>\r\n            </el-row>\r\n        </el-form>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n        }\r\n    }\r\n)\r\nconst form = ref({\r\n  questionList: [\r\n    {\r\n      id: 0,\r\n      content: \"\",\r\n      description: \"\",\r\n      surveyCateId: 1,\r\n      itemList: [],\r\n      result: \"\"\r\n    }\r\n  ]\r\n})\r\nconst handleChange = (val,index) => {\r\n    console.log(val.srcElement.value)\r\n    console.log(index)\r\n    form.value.questionList[index].result = val.srcElement.value\r\n    console.log(form.value)\r\n}\r\nconst handleCheck = (val,index,i) => {\r\n    let checked = form.value.questionList[index].itemList[i].checked;\r\n    // itemList.forEach((item) => {\r\n    //     if (item.id === itemId) {\r\n    //         item.checked = !item.checked;\r\n    //     }\r\n    // });\r\n    // form.value.questionList[index].itemList = itemList;\r\n    console.log(i)\r\n    console.log(checked)\r\n    form.value.questionList[index].itemList[i].checked = !checked\r\n    console.log(form.value.questionList[index].itemList[i].checked)\r\n}\r\n// const questionList = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = async (surveyQuestionIds) => {\r\n    // 根据题目id串获取问卷题目集合\r\n    let res = await axios.get('/api/survey-question/getSurveyQuestions/' + surveyQuestionIds);\r\n    let list = res.data.data.surveyQuestions\r\n    // 遍历题目集合\r\n    for (var i=0; i<list.length; i++) {\r\n        // 如果是选择题，加载选项\r\n        if (list[i].surveyCateId === 1 || list[i].surveyCateId === 2) {\r\n            let res2 = await axios.get('/api/survey-item/getSurveyItems/' + list[i].surveyItemIds);\r\n            let itemList = res2.data.data.surveyItems;\r\n            // 选项ID为int类型不能反显，转为string\r\n            itemList.forEach((item)=> item.id = item.id.toString())\r\n            // 如果是多选题，添加checked属性\r\n            if (list[i].surveyCateId === 2) {\r\n                itemList.forEach((item)=> item.checked = false)\r\n            }\r\n            list[i].itemList = itemList;\r\n        } else {\r\n          list[i].itemList = [];\r\n        }\r\n        list[i].result = \"\";\r\n    }\r\n    // questionList.value = list;\r\n    form.value.questionList = list;\r\n    console.log(list)\r\n    console.log(form.value.questionList)\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.question {\r\n  margin-bottom: 15px;\r\n  font-size: large;\r\n}\r\n.description {\r\n  margin: 15px;\r\n}\r\n.result {\r\n  margin-bottom: 15px;\r\n}\r\n.item {\r\n  margin-left: 15px;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}