{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nexport default {\n  __name: 'editQuestion',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    },\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    }\n  },\n  emits: ['update:modelValue'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n    const tableData = ref([]);\n    const initQuestionList = async () => {\n      const res = await axios.get('/api/survey-question/all');\n      tableData.value = res.data.data.surveyQuestions;\n    };\n    const cateFormatter = row => {\n      switch (row.surveyCateId) {\n        case 1:\n          return \"选择题\";\n        case 2:\n          return \"判断题\";\n        case 3:\n          return \"简答题\";\n        default:\n          return row.surveyCateId;\n      }\n    };\n    watch(() => props.dialogVisible, () => {\n      if (props.dialogVisible === true) {\n        initQuestionList();\n      }\n    });\n    const handleClose = () => {\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      props,\n      tableData,\n      initQuestionList,\n      cateFormatter,\n      emits,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","ElMessage","ElMessageBox","tableData","initQuestionList","res","get","value","data","surveyQuestions","cateFormatter","row","surveyCateId","props","dialogVisible","handleClose","emits"],"sources":["D:/vue_project/survey-vue/src/views/assembly/components/editQuestion.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n        model-value=\"dialogVisible\"\r\n        title=\"选项管理\"\r\n        width=\"50%\"\r\n        @close=\"handleClose\"\r\n        center\r\n    >\r\n        请选择要组卷的题目：\r\n        <el-table :data=\"tableData\" stripe style=\"width: 100%\">\r\n            <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n            <el-table-column prop=\"content\" label=\"问题\" width=\"250\" />\r\n            <el-table-column prop=\"description\" label=\"描述\" width=\"250\" />\r\n            <el-table-column prop=\"surveyCateId\" label=\"分类ID\" width=\"120\" :formatter=\"cateFormatter\"/>\r\n            <el-table-column prop=\"surveyItemIds\" label=\"选项ID\" width=\"120\" />\r\n        </el-table>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\nimport {ElMessage, ElMessageBox} from \"element-plus\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        }\r\n    }\r\n);\r\nconst tableData = ref([]);\r\nconst initQuestionList = async () => {\r\n    const res = await axios.get('/api/survey-question/all');\r\n    tableData.value = res.data.data.surveyQuestions;\r\n};\r\nconst cateFormatter = (row) => {\r\n    switch (row.surveyCateId) {\r\n        case 1:\r\n            return \"选择题\"\r\n        case 2:\r\n            return \"判断题\"\r\n        case 3:\r\n            return \"简答题\"\r\n        default:\r\n            return row.surveyCateId\r\n    }\r\n}\r\nwatch(\r\n    () => props.dialogVisible,\r\n    () => {\r\n        if (props.dialogVisible === true) {\r\n            initQuestionList();\r\n        }\r\n    },\r\n);\r\nconst emits = defineEmits(['update:modelValue']);\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"],"mappings":"AAoBA,SAAkCA,GAAG,EAAEC,KAAK,QAAO,KAAK;AACxD,OAAOC,KAAK,MAAM,cAAc;AAChC,SAAQC,SAAS,EAAEC,YAAY,QAAO,cAAc;;;;;;;;;;;;;;;;;;;;;;IAgBpD,MAAMC,SAAS,GAAGL,GAAG,CAAC,EAAE,CAAC;IACzB,MAAMM,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,MAAMC,GAAG,GAAG,MAAML,KAAK,CAACM,GAAG,CAAC,0BAA0B,CAAC;MACvDH,SAAS,CAACI,KAAK,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI,CAACC,eAAe;IACnD,CAAC;IACD,MAAMC,aAAa,GAAIC,GAAG,IAAK;MAC3B,QAAQA,GAAG,CAACC,YAAY;QACpB,KAAK,CAAC;UACF,OAAO,KAAK;QAChB,KAAK,CAAC;UACF,OAAO,KAAK;QAChB,KAAK,CAAC;UACF,OAAO,KAAK;QAChB;UACI,OAAOD,GAAG,CAACC,YAAY;MAC/B;IACJ,CAAC;IACDb,KAAK,CACD,MAAMc,KAAK,CAACC,aAAa,EACzB,MAAM;MACF,IAAID,KAAK,CAACC,aAAa,KAAK,IAAI,EAAE;QAC9BV,gBAAgB,CAAC,CAAC;MACtB;IACJ,CACJ,CAAC;IAED,MAAMW,WAAW,GAAGA,CAAA,KAAM;MACtBC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}