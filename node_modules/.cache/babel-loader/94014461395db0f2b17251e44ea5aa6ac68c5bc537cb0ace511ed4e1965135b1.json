{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport axios from \"@/util/axios\";\nexport default {\n  __name: 'surveyDialog',\n  props: {\n    id: {\n      type: Number,\n      default: -1,\n      required: true\n    },\n    dialogVisible: {\n      type: Boolean,\n      default: false,\n      required: true\n    },\n    surveyQuestionIds: {\n      type: String,\n      default: \"0\",\n      required: true\n    }\n  },\n  emits: ['update:modelValue', 'initList'],\n  setup(__props, {\n    expose: __expose,\n    emit: emits\n  }) {\n    __expose();\n    const props = __props;\n    watch(() => props.dialogVisible, () => {\n      let id = props.id;\n      if (id !== -1 && props.dialogVisible === true) {\n        initData(props.surveyQuestionIds);\n      }\n    });\n    const questionList = ref([]);\n    const initData = surveyQuestionIds => {\n      let questionIdList = surveyQuestionIds.split(',');\n      questionList.value = questionIdList.map(async item => {\n        let res = await axios.get('/api/survey-question/one/' + item);\n        let question = res.data.data.surveyQuestion;\n        console.log(question);\n        return question;\n      });\n    };\n    const handleClose = () => {\n      emits('update:modelValue', false);\n    };\n    const __returned__ = {\n      props,\n      questionList,\n      emits,\n      initData,\n      handleClose,\n      ref,\n      watch,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","axios","props","dialogVisible","id","initData","surveyQuestionIds","questionList","questionIdList","split","value","map","item","res","get","question","data","surveyQuestion","console","log","handleClose","emits"],"sources":["D:/vue_project/survey-vue/src/views/survey/components/surveyDialog.vue"],"sourcesContent":["<template>\r\n    <el-dialog\r\n            model-value=\"dialogVisible\"\r\n            title=\"答题\"\r\n            width=\"40%\"\r\n            @close=\"handleClose\"\r\n    >\r\n        <el-row\r\n            v-for=\"(item,index) in questionList\"\r\n            :key=\"item.id\"\r\n        >\r\n            <span>{{index}}、{{item.content}}</span>\r\n<!--&lt;!&ndash;            如果有描述则显示描述&ndash;&gt;-->\r\n<!--            <span v-if=\"item.description!=''\">{{item.description}}</span>-->\r\n<!--&lt;!&ndash;            如果是选择题&ndash;&gt;-->\r\n<!--            <span v-if=\"item.surveyCateId===1\">-->\r\n\r\n<!--            </span>-->\r\n<!--&lt;!&ndash;            如果是判断题&ndash;&gt;-->\r\n<!--            <span v-if=\"item.surveyCateId===2\">-->\r\n\r\n<!--            </span>-->\r\n<!--&lt;!&ndash;            如果是简答题或其他&ndash;&gt;-->\r\n<!--            <span v-if=\"item.surveyCateId!==1 && item.surveyCateId!==2\">-->\r\n\r\n<!--            </span>-->\r\n        </el-row>\r\n    </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {defineEmits, defineProps, ref, watch} from \"vue\";\r\nimport axios from \"@/util/axios\";\r\n\r\nconst props = defineProps(\r\n    {\r\n        id: {\r\n            type: Number,\r\n            default: -1,\r\n            required: true\r\n        },\r\n        dialogVisible: {\r\n            type: Boolean,\r\n            default: false,\r\n            required: true\r\n        },\r\n        surveyQuestionIds: {\r\n            type: String,\r\n            default: \"0\",\r\n            required: true\r\n        }\r\n    }\r\n)\r\nwatch(\r\n    ()=>props.dialogVisible,\r\n    ()=>{\r\n        let id = props.id;\r\n        if (id !== -1 && props.dialogVisible === true) {\r\n            initData(props.surveyQuestionIds);\r\n        }\r\n    }\r\n)\r\nconst questionList = ref([]);\r\nconst emits = defineEmits(['update:modelValue','initList']);\r\nconst initData = (surveyQuestionIds) => {\r\n    let questionIdList = surveyQuestionIds.split(',');\r\n    questionList.value = questionIdList.map(\r\n        async (item) => {\r\n            let res = await axios.get('/api/survey-question/one/' + item);\r\n            let question = res.data.data.surveyQuestion;\r\n            console.log(question)\r\n            return question;\r\n        }\r\n    );\r\n}\r\nconst handleClose = () => {\r\n    emits('update:modelValue', false);\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"AA+BA,SAAkCA,GAAG,EAAEC,KAAK,QAAO,KAAK;AACxD,OAAOC,KAAK,MAAM,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqBhCD,KAAK,CACD,MAAIE,KAAK,CAACC,aAAa,EACvB,MAAI;MACA,IAAIC,EAAE,GAAGF,KAAK,CAACE,EAAE;MACjB,IAAIA,EAAE,KAAK,CAAC,CAAC,IAAIF,KAAK,CAACC,aAAa,KAAK,IAAI,EAAE;QAC3CE,QAAQ,CAACH,KAAK,CAACI,iBAAiB,CAAC;MACrC;IACJ,CACJ,CAAC;IACD,MAAMC,YAAY,GAAGR,GAAG,CAAC,EAAE,CAAC;IAE5B,MAAMM,QAAQ,GAAIC,iBAAiB,IAAK;MACpC,IAAIE,cAAc,GAAGF,iBAAiB,CAACG,KAAK,CAAC,GAAG,CAAC;MACjDF,YAAY,CAACG,KAAK,GAAGF,cAAc,CAACG,GAAG,CACnC,MAAOC,IAAI,IAAK;QACZ,IAAIC,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,2BAA2B,GAAGF,IAAI,CAAC;QAC7D,IAAIG,QAAQ,GAAGF,GAAG,CAACG,IAAI,CAACA,IAAI,CAACC,cAAc;QAC3CC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;QACrB,OAAOA,QAAQ;MACnB,CACJ,CAAC;IACL,CAAC;IACD,MAAMK,WAAW,GAAGA,CAAA,KAAM;MACtBC,KAAK,CAAC,mBAAmB,EAAE,KAAK,CAAC;IACrC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}